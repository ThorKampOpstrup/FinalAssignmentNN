// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nn_inference_nn_inference,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.284616,HLS_SYN_LAT=1949,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=6184,HLS_SYN_LUT=8024,HLS_VERSION=2020_2}" *)

module nn_inference (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_img_address0,
        input_img_ce0,
        input_img_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_pp0_stage0 = 40'd2;
parameter    ap_ST_fsm_state6 = 40'd4;
parameter    ap_ST_fsm_state7 = 40'd8;
parameter    ap_ST_fsm_pp1_stage0 = 40'd16;
parameter    ap_ST_fsm_state11 = 40'd32;
parameter    ap_ST_fsm_pp2_stage0 = 40'd64;
parameter    ap_ST_fsm_state16 = 40'd128;
parameter    ap_ST_fsm_state17 = 40'd256;
parameter    ap_ST_fsm_state18 = 40'd512;
parameter    ap_ST_fsm_state19 = 40'd1024;
parameter    ap_ST_fsm_state20 = 40'd2048;
parameter    ap_ST_fsm_state21 = 40'd4096;
parameter    ap_ST_fsm_state22 = 40'd8192;
parameter    ap_ST_fsm_state23 = 40'd16384;
parameter    ap_ST_fsm_state24 = 40'd32768;
parameter    ap_ST_fsm_state25 = 40'd65536;
parameter    ap_ST_fsm_state26 = 40'd131072;
parameter    ap_ST_fsm_state27 = 40'd262144;
parameter    ap_ST_fsm_state28 = 40'd524288;
parameter    ap_ST_fsm_state29 = 40'd1048576;
parameter    ap_ST_fsm_state30 = 40'd2097152;
parameter    ap_ST_fsm_state31 = 40'd4194304;
parameter    ap_ST_fsm_state32 = 40'd8388608;
parameter    ap_ST_fsm_pp3_stage0 = 40'd16777216;
parameter    ap_ST_fsm_state41 = 40'd33554432;
parameter    ap_ST_fsm_pp4_stage0 = 40'd67108864;
parameter    ap_ST_fsm_state46 = 40'd134217728;
parameter    ap_ST_fsm_state47 = 40'd268435456;
parameter    ap_ST_fsm_state48 = 40'd536870912;
parameter    ap_ST_fsm_state49 = 40'd1073741824;
parameter    ap_ST_fsm_state50 = 40'd2147483648;
parameter    ap_ST_fsm_state51 = 40'd4294967296;
parameter    ap_ST_fsm_state52 = 40'd8589934592;
parameter    ap_ST_fsm_state53 = 40'd17179869184;
parameter    ap_ST_fsm_state54 = 40'd34359738368;
parameter    ap_ST_fsm_pp5_stage0 = 40'd68719476736;
parameter    ap_ST_fsm_state59 = 40'd137438953472;
parameter    ap_ST_fsm_state60 = 40'd274877906944;
parameter    ap_ST_fsm_state61 = 40'd549755813888;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_img_address0;
output   input_img_ce0;
input  [31:0] input_img_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_img_ce0;

(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] weights_layer1_weights_V_address0;
reg    weights_layer1_weights_V_ce0;
wire  signed [8:0] weights_layer1_weights_V_q0;
wire   [11:0] weights_layer1_weights_V_address1;
reg    weights_layer1_weights_V_ce1;
wire  signed [8:0] weights_layer1_weights_V_q1;
wire   [3:0] layer2_weights_V_0_address0;
reg    layer2_weights_V_0_ce0;
wire  signed [9:0] layer2_weights_V_0_q0;
wire   [3:0] layer2_weights_V_1_address0;
reg    layer2_weights_V_1_ce0;
wire  signed [9:0] layer2_weights_V_1_q0;
wire   [3:0] layer2_weights_V_2_address0;
reg    layer2_weights_V_2_ce0;
wire  signed [7:0] layer2_weights_V_2_q0;
wire   [3:0] layer2_weights_V_3_address0;
reg    layer2_weights_V_3_ce0;
wire  signed [7:0] layer2_weights_V_3_q0;
wire   [3:0] layer2_weights_V_4_address0;
reg    layer2_weights_V_4_ce0;
wire  signed [8:0] layer2_weights_V_4_q0;
wire   [3:0] layer2_weights_V_5_address0;
reg    layer2_weights_V_5_ce0;
wire  signed [7:0] layer2_weights_V_5_q0;
wire   [3:0] layer2_weights_V_6_address0;
reg    layer2_weights_V_6_ce0;
wire  signed [7:0] layer2_weights_V_6_q0;
wire   [3:0] layer2_weights_V_7_address0;
reg    layer2_weights_V_7_ce0;
wire  signed [8:0] layer2_weights_V_7_q0;
wire   [3:0] layer2_weights_V_8_address0;
reg    layer2_weights_V_8_ce0;
wire  signed [8:0] layer2_weights_V_8_q0;
wire   [3:0] layer2_weights_V_9_address0;
reg    layer2_weights_V_9_ce0;
wire  signed [9:0] layer2_weights_V_9_q0;
wire   [3:0] layer2_weights_V_10_address0;
reg    layer2_weights_V_10_ce0;
wire  signed [7:0] layer2_weights_V_10_q0;
wire   [3:0] layer2_weights_V_11_address0;
reg    layer2_weights_V_11_ce0;
wire  signed [7:0] layer2_weights_V_11_q0;
wire   [3:0] layer2_weights_V_12_address0;
reg    layer2_weights_V_12_ce0;
wire  signed [7:0] layer2_weights_V_12_q0;
wire   [3:0] layer2_weights_V_13_address0;
reg    layer2_weights_V_13_ce0;
wire  signed [8:0] layer2_weights_V_13_q0;
wire   [3:0] layer2_weights_V_14_address0;
reg    layer2_weights_V_14_ce0;
wire  signed [8:0] layer2_weights_V_14_q0;
wire   [3:0] layer2_weights_V_15_address0;
reg    layer2_weights_V_15_ce0;
wire  signed [7:0] layer2_weights_V_15_q0;
wire   [3:0] layer2_weights_V_16_address0;
reg    layer2_weights_V_16_ce0;
wire  signed [8:0] layer2_weights_V_16_q0;
wire   [3:0] layer2_weights_V_17_address0;
reg    layer2_weights_V_17_ce0;
wire  signed [8:0] layer2_weights_V_17_q0;
wire   [3:0] layer2_weights_V_18_address0;
reg    layer2_weights_V_18_ce0;
wire  signed [8:0] layer2_weights_V_18_q0;
wire   [3:0] layer2_weights_V_19_address0;
reg    layer2_weights_V_19_ce0;
wire  signed [7:0] layer2_weights_V_19_q0;
wire   [3:0] layer2_weights_V_20_address0;
reg    layer2_weights_V_20_ce0;
wire  signed [8:0] layer2_weights_V_20_q0;
wire   [3:0] layer2_weights_V_21_address0;
reg    layer2_weights_V_21_ce0;
wire  signed [7:0] layer2_weights_V_21_q0;
wire   [3:0] layer2_weights_V_22_address0;
reg    layer2_weights_V_22_ce0;
wire  signed [7:0] layer2_weights_V_22_q0;
wire   [3:0] layer2_weights_V_23_address0;
reg    layer2_weights_V_23_ce0;
wire  signed [8:0] layer2_weights_V_23_q0;
wire   [3:0] layer2_weights_V_24_address0;
reg    layer2_weights_V_24_ce0;
wire  signed [8:0] layer2_weights_V_24_q0;
wire   [3:0] layer2_weights_V_25_address0;
reg    layer2_weights_V_25_ce0;
wire  signed [9:0] layer2_weights_V_25_q0;
wire   [3:0] layer2_weights_V_26_address0;
reg    layer2_weights_V_26_ce0;
wire  signed [7:0] layer2_weights_V_26_q0;
wire   [3:0] layer2_weights_V_27_address0;
reg    layer2_weights_V_27_ce0;
wire  signed [8:0] layer2_weights_V_27_q0;
wire   [3:0] layer2_weights_V_28_address0;
reg    layer2_weights_V_28_ce0;
wire  signed [8:0] layer2_weights_V_28_q0;
wire   [3:0] layer2_weights_V_29_address0;
reg    layer2_weights_V_29_ce0;
wire  signed [7:0] layer2_weights_V_29_q0;
wire   [3:0] layer2_weights_V_30_address0;
reg    layer2_weights_V_30_ce0;
wire   [7:0] layer2_weights_V_30_q0;
wire   [3:0] layer2_weights_V_31_address0;
reg    layer2_weights_V_31_ce0;
wire  signed [7:0] layer2_weights_V_31_q0;
reg   [6:0] i_reg_1346;
reg   [6:0] k_reg_1369;
reg   [31:0] sum_V_2_reg_1380;
reg   [5:0] i_1_reg_1393;
reg   [4:0] j_1_reg_1404;
reg   [4:0] i_2_reg_1415;
reg   [1:0] j_2_reg_1426;
reg   [1:0] j_2_reg_1426_pp5_iter1_reg;
wire    ap_CS_fsm_pp5_stage0;
wire    ap_block_state55_pp5_stage0_iter0;
wire    ap_block_state56_pp5_stage0_iter1;
wire    ap_block_state57_pp5_stage0_iter2;
wire    ap_block_state58_pp5_stage0_iter3;
wire    ap_block_pp5_stage0_11001;
reg   [1:0] j_2_reg_1426_pp5_iter2_reg;
wire   [6:0] add_ln5_fu_1480_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln5_fu_1486_p2;
reg   [0:0] icmp_ln5_reg_4646;
reg   [0:0] icmp_ln5_reg_4646_pp0_iter1_reg;
reg   [0:0] icmp_ln5_reg_4646_pp0_iter2_reg;
wire   [63:0] i_cast_fu_1492_p1;
reg   [63:0] i_cast_reg_4650;
reg   [63:0] i_cast_reg_4650_pp0_iter1_reg;
reg   [63:0] i_cast_reg_4650_pp0_iter2_reg;
reg   [31:0] input_img_load_reg_4660;
reg   [31:0] input_img_load_reg_4660_pp0_iter2_reg;
reg   [0:0] p_Result_8_reg_4670;
wire   [51:0] trunc_ln565_fu_1532_p1;
reg   [51:0] trunc_ln565_reg_4675;
wire   [0:0] icmp_ln571_fu_1536_p2;
reg   [0:0] icmp_ln571_reg_4680;
wire   [11:0] F2_fu_1542_p2;
reg   [11:0] F2_reg_4688;
wire   [4:0] temp_output_0_V_addr_reg_4696;
wire    ap_CS_fsm_state6;
wire   [3:0] temp_output2_0_V_addr_reg_4701;
wire   [5:0] add_ln21_fu_1768_p2;
reg   [5:0] add_ln21_reg_4706;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln21_fu_1774_p2;
wire   [63:0] zext_ln21_fu_1780_p1;
reg   [63:0] zext_ln21_reg_4715;
wire   [11:0] zext_ln21_1_fu_1784_p1;
reg   [11:0] zext_ln21_1_reg_4720;
wire   [0:0] icmp_ln25_fu_1788_p2;
reg   [0:0] icmp_ln25_reg_4725;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln25_reg_4725_pp1_iter1_reg;
wire   [6:0] add_ln25_fu_1794_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [6:0] or_ln25_fu_1828_p2;
reg   [6:0] or_ln25_reg_4744;
wire   [39:0] mul_ln1192_fu_1847_p2;
reg   [39:0] mul_ln1192_reg_4754;
wire   [31:0] fp_input_img_V_q0;
reg  signed [31:0] r_V_1_reg_4764;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
wire   [5:0] add_ln77_fu_1930_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state12_pp2_stage0_iter0;
wire    ap_block_state13_pp2_stage0_iter1;
wire    ap_block_state14_pp2_stage0_iter2;
wire    ap_block_state15_pp2_stage0_iter3;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln77_fu_1936_p2;
reg   [4:0] temp_output_0_V_addr_1_reg_4783;
reg   [4:0] temp_output_0_V_addr_1_reg_4783_pp2_iter1_reg;
reg   [4:0] temp_output_0_V_addr_1_reg_4783_pp2_iter2_reg;
wire   [0:0] icmp_ln885_fu_1947_p2;
reg   [0:0] icmp_ln885_reg_4789;
reg   [0:0] icmp_ln885_reg_4789_pp2_iter2_reg;
wire   [0:0] p_Result_10_fu_1953_p3;
reg   [0:0] p_Result_10_reg_4793;
wire   [31:0] tmp_V_4_fu_1967_p3;
reg   [31:0] tmp_V_4_reg_4798;
wire   [0:0] icmp_ln908_fu_2087_p2;
reg   [0:0] icmp_ln908_reg_4803;
wire   [31:0] add_ln908_fu_2101_p2;
reg   [31:0] add_ln908_reg_4808;
wire   [31:0] sub_ln909_fu_2113_p2;
reg   [31:0] sub_ln909_reg_4813;
wire   [0:0] select_ln908_fu_2119_p3;
reg   [0:0] select_ln908_reg_4818;
wire   [10:0] trunc_ln893_fu_2127_p1;
reg   [10:0] trunc_ln893_reg_4823;
wire   [63:0] bitcast_ln734_fu_2228_p1;
wire   [0:0] icmp_ln1506_fu_2243_p2;
reg   [0:0] icmp_ln1506_reg_4833;
wire   [0:0] icmp_ln1506_1_fu_2249_p2;
reg   [0:0] icmp_ln1506_1_reg_4838;
wire    ap_CS_fsm_state16;
wire   [31:0] temp_output_0_V_q0;
reg   [31:0] temp_output_0_V_load_reg_4851;
wire    ap_CS_fsm_state17;
wire   [31:0] temp_output_0_V_q1;
reg   [31:0] temp_output_0_V_load_1_reg_4856;
reg   [31:0] temp_output_0_V_load_2_reg_4871;
wire    ap_CS_fsm_state18;
reg   [31:0] temp_output_0_V_load_3_reg_4876;
reg   [31:0] temp_output_0_V_load_4_reg_4891;
wire    ap_CS_fsm_state19;
reg   [31:0] temp_output_0_V_load_5_reg_4896;
reg   [31:0] temp_output_0_V_load_6_reg_4911;
wire    ap_CS_fsm_state20;
reg   [31:0] temp_output_0_V_load_7_reg_4916;
reg   [31:0] temp_output_0_V_load_8_reg_4931;
wire    ap_CS_fsm_state21;
reg   [31:0] temp_output_0_V_load_9_reg_4936;
reg   [31:0] temp_output_0_V_load_10_reg_4951;
wire    ap_CS_fsm_state22;
reg   [31:0] temp_output_0_V_load_11_reg_4956;
reg   [31:0] temp_output_0_V_load_12_reg_4971;
wire    ap_CS_fsm_state23;
reg   [31:0] temp_output_0_V_load_13_reg_4976;
reg   [31:0] temp_output_0_V_load_14_reg_4991;
wire    ap_CS_fsm_state24;
reg   [31:0] temp_output_0_V_load_15_reg_4996;
reg   [31:0] temp_output_0_V_load_16_reg_5011;
wire    ap_CS_fsm_state25;
reg   [31:0] temp_output_0_V_load_17_reg_5016;
reg   [31:0] temp_output_0_V_load_18_reg_5031;
wire    ap_CS_fsm_state26;
reg   [31:0] temp_output_0_V_load_19_reg_5036;
reg   [31:0] temp_output_0_V_load_20_reg_5051;
wire    ap_CS_fsm_state27;
reg   [31:0] temp_output_0_V_load_21_reg_5056;
reg   [31:0] temp_output_0_V_load_22_reg_5071;
wire    ap_CS_fsm_state28;
reg   [31:0] temp_output_0_V_load_23_reg_5076;
reg   [31:0] temp_output_0_V_load_24_reg_5091;
wire    ap_CS_fsm_state29;
reg   [31:0] temp_output_0_V_load_25_reg_5096;
reg   [31:0] temp_output_0_V_load_26_reg_5111;
wire    ap_CS_fsm_state30;
reg   [31:0] temp_output_0_V_load_27_reg_5116;
reg   [31:0] temp_output_0_V_load_28_reg_5131;
wire    ap_CS_fsm_state31;
reg   [31:0] temp_output_0_V_load_29_reg_5136;
wire  signed [39:0] sext_ln708_fu_2265_p1;
reg  signed [39:0] sext_ln708_reg_5151;
wire    ap_CS_fsm_state32;
wire  signed [39:0] sext_ln1192_fu_2268_p1;
reg  signed [39:0] sext_ln1192_reg_5156;
wire  signed [39:0] sext_ln1116_fu_2271_p1;
reg  signed [39:0] sext_ln1116_reg_5161;
wire  signed [39:0] sext_ln1116_1_fu_2274_p1;
reg  signed [39:0] sext_ln1116_1_reg_5166;
wire  signed [39:0] sext_ln1192_1_fu_2277_p1;
reg  signed [39:0] sext_ln1192_1_reg_5171;
wire  signed [39:0] sext_ln1116_2_fu_2280_p1;
reg  signed [39:0] sext_ln1116_2_reg_5176;
wire  signed [39:0] sext_ln1116_3_fu_2283_p1;
reg  signed [39:0] sext_ln1116_3_reg_5181;
wire  signed [39:0] sext_ln1192_2_fu_2286_p1;
reg  signed [39:0] sext_ln1192_2_reg_5186;
wire  signed [39:0] sext_ln1192_3_fu_2289_p1;
reg  signed [39:0] sext_ln1192_3_reg_5191;
wire  signed [39:0] sext_ln1192_4_fu_2292_p1;
reg  signed [39:0] sext_ln1192_4_reg_5196;
wire  signed [39:0] sext_ln1116_4_fu_2295_p1;
reg  signed [39:0] sext_ln1116_4_reg_5201;
wire  signed [39:0] sext_ln1116_5_fu_2298_p1;
reg  signed [39:0] sext_ln1116_5_reg_5206;
wire  signed [39:0] sext_ln1116_6_fu_2301_p1;
reg  signed [39:0] sext_ln1116_6_reg_5211;
wire  signed [39:0] sext_ln1192_5_fu_2304_p1;
reg  signed [39:0] sext_ln1192_5_reg_5216;
wire  signed [39:0] sext_ln1192_6_fu_2307_p1;
reg  signed [39:0] sext_ln1192_6_reg_5221;
wire  signed [39:0] sext_ln1116_7_fu_2310_p1;
reg  signed [39:0] sext_ln1116_7_reg_5226;
wire  signed [39:0] sext_ln1192_7_fu_2313_p1;
reg  signed [39:0] sext_ln1192_7_reg_5231;
wire  signed [39:0] sext_ln1192_8_fu_2316_p1;
reg  signed [39:0] sext_ln1192_8_reg_5236;
wire  signed [39:0] sext_ln1192_9_fu_2319_p1;
reg  signed [39:0] sext_ln1192_9_reg_5241;
wire  signed [39:0] sext_ln1116_8_fu_2322_p1;
reg  signed [39:0] sext_ln1116_8_reg_5246;
wire  signed [39:0] sext_ln1192_10_fu_2325_p1;
reg  signed [39:0] sext_ln1192_10_reg_5251;
wire  signed [39:0] sext_ln1116_9_fu_2328_p1;
reg  signed [39:0] sext_ln1116_9_reg_5256;
wire  signed [39:0] sext_ln1116_10_fu_2331_p1;
reg  signed [39:0] sext_ln1116_10_reg_5261;
wire  signed [39:0] sext_ln1192_11_fu_2334_p1;
reg  signed [39:0] sext_ln1192_11_reg_5266;
wire  signed [39:0] sext_ln1192_12_fu_2337_p1;
reg  signed [39:0] sext_ln1192_12_reg_5271;
wire  signed [39:0] sext_ln1192_13_fu_2340_p1;
reg  signed [39:0] sext_ln1192_13_reg_5276;
wire  signed [39:0] sext_ln1116_11_fu_2343_p1;
reg  signed [39:0] sext_ln1116_11_reg_5281;
wire  signed [39:0] sext_ln1192_14_fu_2346_p1;
reg  signed [39:0] sext_ln1192_14_reg_5286;
wire  signed [38:0] sext_ln1192_15_fu_2349_p1;
reg  signed [38:0] sext_ln1192_15_reg_5291;
wire  signed [39:0] sext_ln1116_12_fu_2352_p1;
reg  signed [39:0] sext_ln1116_12_reg_5296;
wire  signed [39:0] sext_ln1116_13_fu_2355_p1;
reg  signed [39:0] sext_ln1116_13_reg_5301;
wire  signed [39:0] temp_output_0_V_load_31_cast_fu_2359_p1;
reg  signed [39:0] temp_output_0_V_load_31_cast_reg_5306;
wire   [4:0] add_ln40_fu_2363_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state33_pp3_stage0_iter0;
wire    ap_block_state34_pp3_stage0_iter1;
wire    ap_block_state35_pp3_stage0_iter2;
wire    ap_block_state36_pp3_stage0_iter3;
wire    ap_block_state37_pp3_stage0_iter4;
wire    ap_block_state38_pp3_stage0_iter5;
wire    ap_block_state39_pp3_stage0_iter6;
wire    ap_block_state40_pp3_stage0_iter7;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln40_fu_2369_p2;
reg   [0:0] icmp_ln40_reg_5316;
reg   [0:0] icmp_ln40_reg_5316_pp3_iter1_reg;
reg   [0:0] icmp_ln40_reg_5316_pp3_iter2_reg;
reg   [0:0] icmp_ln40_reg_5316_pp3_iter3_reg;
reg   [0:0] icmp_ln40_reg_5316_pp3_iter4_reg;
reg   [0:0] icmp_ln40_reg_5316_pp3_iter5_reg;
reg   [0:0] icmp_ln40_reg_5316_pp3_iter6_reg;
wire   [63:0] j_1_cast_fu_2375_p1;
reg   [63:0] j_1_cast_reg_5320;
reg   [63:0] j_1_cast_reg_5320_pp3_iter1_reg;
reg   [63:0] j_1_cast_reg_5320_pp3_iter2_reg;
reg   [63:0] j_1_cast_reg_5320_pp3_iter3_reg;
reg   [63:0] j_1_cast_reg_5320_pp3_iter4_reg;
reg   [63:0] j_1_cast_reg_5320_pp3_iter5_reg;
reg   [63:0] j_1_cast_reg_5320_pp3_iter6_reg;
wire   [39:0] mul_ln703_1_fu_2464_p2;
reg   [39:0] mul_ln703_1_reg_5381;
reg   [31:0] tmp_27_reg_5386;
wire   [39:0] mul_ln1192_3_fu_2483_p2;
reg   [39:0] mul_ln1192_3_reg_5391;
wire   [39:0] mul_ln703_2_fu_2492_p2;
reg   [39:0] mul_ln703_2_reg_5396;
wire   [39:0] mul_ln1192_5_fu_2625_p2;
reg   [39:0] mul_ln1192_5_reg_5426;
reg   [31:0] tmp_32_reg_5431;
wire   [39:0] mul_ln1192_6_fu_2644_p2;
reg   [39:0] mul_ln1192_6_reg_5436;
wire   [39:0] mul_ln703_4_fu_2653_p2;
reg   [39:0] mul_ln703_4_reg_5441;
wire   [39:0] mul_ln1192_7_fu_2786_p2;
reg   [39:0] mul_ln1192_7_reg_5471;
reg   [31:0] tmp_37_reg_5476;
wire   [39:0] mul_ln1192_8_fu_2805_p2;
reg   [39:0] mul_ln1192_8_reg_5481;
wire   [39:0] mul_ln703_7_fu_2814_p2;
reg   [39:0] mul_ln703_7_reg_5486;
wire   [39:0] mul_ln1192_11_fu_2947_p2;
reg   [39:0] mul_ln1192_11_reg_5516;
reg   [31:0] tmp_42_reg_5521;
wire   [39:0] mul_ln703_8_fu_2966_p2;
reg   [39:0] mul_ln703_8_reg_5526;
wire   [39:0] mul_ln1192_12_fu_2975_p2;
reg   [39:0] mul_ln1192_12_reg_5531;
wire   [39:0] mul_ln1192_13_fu_3108_p2;
reg   [39:0] mul_ln1192_13_reg_5561;
reg   [31:0] tmp_47_reg_5566;
wire   [39:0] mul_ln1192_14_fu_3127_p2;
reg   [39:0] mul_ln1192_14_reg_5571;
wire   [39:0] mul_ln1192_15_fu_3136_p2;
reg   [39:0] mul_ln1192_15_reg_5576;
wire   [38:0] mul_ln1192_17_fu_3269_p2;
reg   [38:0] mul_ln1192_17_reg_5606;
reg   [31:0] tmp_52_reg_5611;
wire   [39:0] mul_ln703_12_fu_3288_p2;
reg   [39:0] mul_ln703_12_reg_5616;
reg  signed [7:0] layer2_weights_V_30_load_reg_5621;
wire   [4:0] add_ln92_fu_3408_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state42_pp4_stage0_iter0;
wire    ap_block_state43_pp4_stage0_iter1;
wire    ap_block_state44_pp4_stage0_iter2;
wire    ap_block_state45_pp4_stage0_iter3;
wire    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln92_fu_3414_p2;
reg   [3:0] temp_output2_0_V_addr_2_reg_5640;
reg   [3:0] temp_output2_0_V_addr_2_reg_5640_pp4_iter1_reg;
reg   [3:0] temp_output2_0_V_addr_2_reg_5640_pp4_iter2_reg;
wire   [0:0] icmp_ln885_1_fu_3425_p2;
reg   [0:0] icmp_ln885_1_reg_5646;
reg   [0:0] icmp_ln885_1_reg_5646_pp4_iter2_reg;
wire   [0:0] p_Result_14_fu_3431_p3;
reg   [0:0] p_Result_14_reg_5650;
wire   [31:0] tmp_V_5_fu_3445_p3;
reg   [31:0] tmp_V_5_reg_5655;
wire   [0:0] icmp_ln908_1_fu_3565_p2;
reg   [0:0] icmp_ln908_1_reg_5660;
wire   [31:0] add_ln908_1_fu_3579_p2;
reg   [31:0] add_ln908_1_reg_5665;
wire   [31:0] sub_ln909_1_fu_3591_p2;
reg   [31:0] sub_ln909_1_reg_5670;
wire   [0:0] select_ln908_2_fu_3597_p3;
reg   [0:0] select_ln908_2_reg_5675;
wire   [10:0] trunc_ln893_1_fu_3605_p1;
reg   [10:0] trunc_ln893_1_reg_5680;
wire   [63:0] bitcast_ln734_1_fu_3706_p1;
wire   [0:0] icmp_ln1506_2_fu_3721_p2;
reg   [0:0] icmp_ln1506_2_reg_5690;
wire   [0:0] icmp_ln1506_3_fu_3727_p2;
reg   [0:0] icmp_ln1506_3_reg_5695;
wire    ap_CS_fsm_state46;
wire   [31:0] temp_output2_0_V_q0;
reg   [31:0] temp_output2_0_V_load_reg_5727;
wire    ap_CS_fsm_state47;
wire   [31:0] temp_output2_0_V_q1;
reg   [31:0] temp_output2_0_V_load_1_reg_5732;
reg   [31:0] temp_output2_0_V_load_2_reg_5747;
wire    ap_CS_fsm_state48;
reg   [31:0] temp_output2_0_V_load_3_reg_5752;
reg   [31:0] temp_output2_0_V_load_4_reg_5767;
wire    ap_CS_fsm_state49;
reg   [31:0] temp_output2_0_V_load_5_reg_5772;
reg   [31:0] temp_output2_0_V_load_6_reg_5787;
wire    ap_CS_fsm_state50;
reg   [31:0] temp_output2_0_V_load_7_reg_5792;
reg   [31:0] temp_output2_0_V_load_8_reg_5807;
wire    ap_CS_fsm_state51;
reg   [31:0] temp_output2_0_V_load_9_reg_5812;
reg   [31:0] temp_output2_0_V_load_10_reg_5827;
wire    ap_CS_fsm_state52;
reg   [31:0] temp_output2_0_V_load_11_reg_5832;
reg   [31:0] temp_output2_0_V_load_12_reg_5847;
wire    ap_CS_fsm_state53;
reg   [31:0] temp_output2_0_V_load_13_reg_5852;
wire  signed [39:0] sext_ln1116_14_fu_3748_p1;
reg  signed [39:0] sext_ln1116_14_reg_5867;
wire    ap_CS_fsm_state54;
wire  signed [39:0] sext_ln1116_15_fu_3751_p1;
reg  signed [39:0] sext_ln1116_15_reg_5872;
wire  signed [39:0] sext_ln1116_16_fu_3754_p1;
reg  signed [39:0] sext_ln1116_16_reg_5877;
wire  signed [39:0] sext_ln1116_17_fu_3757_p1;
reg  signed [39:0] sext_ln1116_17_reg_5882;
wire  signed [39:0] sext_ln1116_18_fu_3760_p1;
reg  signed [39:0] sext_ln1116_18_reg_5887;
wire  signed [39:0] sext_ln1116_19_fu_3763_p1;
reg  signed [39:0] sext_ln1116_19_reg_5892;
wire  signed [39:0] sext_ln1116_20_fu_3766_p1;
reg  signed [39:0] sext_ln1116_20_reg_5897;
wire  signed [39:0] sext_ln1116_21_fu_3769_p1;
reg  signed [39:0] sext_ln1116_21_reg_5902;
wire  signed [39:0] sext_ln1116_22_fu_3772_p1;
reg  signed [39:0] sext_ln1116_22_reg_5907;
wire  signed [39:0] sext_ln1116_23_fu_3775_p1;
reg  signed [39:0] sext_ln1116_23_reg_5912;
wire  signed [39:0] sext_ln1116_24_fu_3778_p1;
reg  signed [39:0] sext_ln1116_24_reg_5917;
wire  signed [39:0] sext_ln1116_25_fu_3781_p1;
reg  signed [39:0] sext_ln1116_25_reg_5922;
wire  signed [39:0] sext_ln1116_26_fu_3784_p1;
reg  signed [39:0] sext_ln1116_26_reg_5927;
wire  signed [39:0] sext_ln1116_27_fu_3787_p1;
reg  signed [39:0] sext_ln1116_27_reg_5932;
wire  signed [39:0] sext_ln1116_28_fu_3790_p1;
reg  signed [39:0] sext_ln1116_28_reg_5937;
wire  signed [39:0] temp_output2_0_V_load_15_cast_fu_3794_p1;
reg  signed [39:0] temp_output2_0_V_load_15_cast_reg_5942;
wire   [1:0] add_ln59_fu_3798_p2;
reg   [1:0] add_ln59_reg_5947;
reg    ap_enable_reg_pp5_iter0;
wire   [0:0] icmp_ln59_fu_3804_p2;
reg   [0:0] icmp_ln59_reg_5952;
wire   [39:0] mul_ln1118_3_fu_3937_p2;
reg   [39:0] mul_ln1118_3_reg_5956;
reg   [31:0] tmp_58_reg_5961;
wire   [39:0] mul_ln1118_4_fu_3968_p2;
reg   [39:0] mul_ln1118_4_reg_5966;
wire   [39:0] mul_ln1118_5_fu_3989_p2;
reg   [39:0] mul_ln1118_5_reg_5971;
wire   [39:0] mul_ln1118_8_fu_4158_p2;
reg   [39:0] mul_ln1118_8_reg_5976;
reg   [31:0] tmp_63_reg_5981;
wire   [39:0] mul_ln1118_9_fu_4189_p2;
reg   [39:0] mul_ln1118_9_reg_5986;
wire   [39:0] mul_ln1118_10_fu_4210_p2;
reg   [39:0] mul_ln1118_10_reg_5991;
wire   [39:0] mul_ln1118_13_fu_4379_p2;
reg   [39:0] mul_ln1118_13_reg_5996;
reg   [31:0] tmp_68_reg_6001;
wire   [31:0] tmp_17_fu_4394_p5;
reg  signed [31:0] tmp_17_reg_6006;
wire   [1:0] add_ln109_fu_4520_p2;
wire    ap_CS_fsm_state60;
wire   [31:0] max_val_V_1_fu_4559_p3;
wire   [0:0] icmp_ln109_fu_4526_p2;
wire   [31:0] max_idx_V_1_fu_4579_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state9;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state12;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state33;
reg    ap_enable_reg_pp3_iter1;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
reg    ap_enable_reg_pp3_iter7;
wire    ap_CS_fsm_state41;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state42;
reg    ap_enable_reg_pp4_iter1;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter3;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state55;
reg    ap_enable_reg_pp5_iter1;
reg    ap_enable_reg_pp5_iter2;
reg    ap_enable_reg_pp5_iter3;
reg   [6:0] fp_input_img_V_address0;
reg    fp_input_img_V_ce0;
reg    fp_input_img_V_we0;
reg   [31:0] fp_input_img_V_d0;
wire   [6:0] fp_input_img_V_address1;
reg    fp_input_img_V_ce1;
wire  signed [31:0] fp_input_img_V_q1;
reg   [4:0] temp_output_0_V_address0;
reg    temp_output_0_V_ce0;
reg    temp_output_0_V_we0;
reg   [31:0] temp_output_0_V_d0;
reg   [4:0] temp_output_0_V_address1;
reg    temp_output_0_V_ce1;
reg   [3:0] temp_output2_0_V_address0;
reg    temp_output2_0_V_ce0;
reg    temp_output2_0_V_we0;
reg   [31:0] temp_output2_0_V_d0;
reg   [3:0] temp_output2_0_V_address1;
reg    temp_output2_0_V_ce1;
reg   [5:0] j_reg_1357;
wire    ap_CS_fsm_state11;
wire    ap_block_pp1_stage0;
reg   [1:0] ap_phi_mux_j_2_phi_fu_1430_p4;
wire    ap_block_pp5_stage0;
reg   [1:0] i_3_reg_1438;
wire    ap_CS_fsm_state59;
reg   [31:0] max_idx_V_reg_1449;
reg   [31:0] max_val_V_reg_1461;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1118_fu_1823_p1;
wire   [63:0] k_cast75_fu_1800_p1;
wire   [63:0] zext_ln23_fu_1834_p1;
wire   [63:0] zext_ln1118_1_fu_1865_p1;
wire   [63:0] i_1_cast_fu_1942_p1;
wire    ap_block_pp2_stage0;
wire    ap_block_pp3_stage0;
wire   [63:0] i_2_cast_fu_3420_p1;
wire    ap_block_pp4_stage0;
reg   [31:0] temp_output3_0_2_V_fu_406;
reg   [31:0] temp_output3_0_2_V_1_fu_410;
reg   [31:0] temp_output3_0_2_V_2_fu_414;
wire   [31:0] select_ln571_4_fu_1759_p3;
wire   [0:0] and_ln1506_fu_2259_p2;
wire   [0:0] and_ln1506_1_fu_3737_p2;
wire   [31:0] grp_fu_1472_p0;
reg   [63:0] grp_fu_1475_p0;
wire   [63:0] grp_fu_1472_p1;
wire   [63:0] ireg_fu_1502_p1;
wire   [10:0] exp_tmp_fu_1518_p4;
wire   [62:0] trunc_ln555_fu_1506_p1;
wire   [11:0] zext_ln455_fu_1528_p1;
wire   [52:0] p_Result_9_fu_1548_p3;
wire   [53:0] zext_ln569_fu_1555_p1;
wire   [53:0] man_V_1_fu_1559_p2;
wire   [0:0] icmp_ln581_fu_1572_p2;
wire   [11:0] add_ln581_fu_1577_p2;
wire   [11:0] sub_ln581_fu_1582_p2;
wire  signed [11:0] sh_amt_fu_1587_p3;
wire   [53:0] man_V_2_fu_1565_p3;
wire   [6:0] tmp_21_fu_1608_p4;
wire  signed [31:0] sext_ln581_fu_1595_p1;
wire   [53:0] zext_ln586_fu_1624_p1;
wire   [53:0] ashr_ln586_fu_1628_p2;
wire   [0:0] tmp_72_fu_1638_p3;
wire   [31:0] trunc_ln583_fu_1604_p1;
wire   [0:0] icmp_ln582_fu_1599_p2;
wire   [0:0] xor_ln571_fu_1659_p2;
wire   [0:0] or_ln582_fu_1670_p2;
wire   [0:0] xor_ln582_fu_1675_p2;
wire   [0:0] and_ln581_fu_1681_p2;
wire   [0:0] icmp_ln585_fu_1687_p2;
wire   [0:0] or_ln581_fu_1699_p2;
wire   [0:0] icmp_ln603_fu_1618_p2;
wire   [0:0] xor_ln581_fu_1705_p2;
wire   [31:0] shl_ln604_fu_1653_p2;
wire   [0:0] and_ln603_fu_1711_p2;
wire   [0:0] and_ln585_fu_1693_p2;
wire   [31:0] select_ln588_fu_1645_p3;
wire   [31:0] trunc_ln586_fu_1634_p1;
wire   [0:0] and_ln582_fu_1664_p2;
wire   [0:0] or_ln571_fu_1724_p2;
wire   [31:0] select_ln571_fu_1717_p3;
wire   [31:0] select_ln571_1_fu_1729_p3;
wire   [0:0] or_ln571_1_fu_1753_p2;
wire   [31:0] select_ln571_3_fu_1745_p3;
wire   [31:0] select_ln571_2_fu_1737_p3;
wire   [5:0] tmp_20_fu_1805_p4;
wire   [11:0] tmp_22_fu_1815_p3;
wire   [11:0] tmp_23_fu_1853_p3;
wire   [11:0] add_ln1118_fu_1860_p2;
wire   [39:0] lhs_1_fu_1870_p3;
wire   [39:0] ret_V_fu_1878_p2;
wire   [31:0] tmp_24_fu_1896_p4;
wire   [39:0] lhs_2_fu_1906_p3;
wire   [39:0] mul_ln1192_1_fu_1890_p2;
wire   [39:0] ret_V_1_fu_1914_p2;
wire   [31:0] tmp_V_fu_1961_p2;
reg   [31:0] p_Result_11_fu_1975_p4;
reg   [31:0] l_fu_1985_p3;
wire   [31:0] sub_ln894_fu_1993_p2;
wire   [31:0] lsb_index_fu_1999_p2;
wire   [30:0] tmp_74_fu_2005_p4;
wire   [5:0] trunc_ln897_fu_2021_p1;
wire   [5:0] sub_ln897_fu_2025_p2;
wire   [31:0] zext_ln897_fu_2031_p1;
wire   [31:0] lshr_ln897_fu_2035_p2;
wire   [31:0] shl_ln899_fu_2041_p2;
wire   [31:0] or_ln899_2_fu_2047_p2;
wire   [31:0] and_ln899_fu_2053_p2;
wire   [0:0] tmp_75_fu_2065_p3;
wire   [0:0] icmp_ln896_fu_2015_p2;
wire   [0:0] icmp_ln899_fu_2059_p2;
wire   [0:0] p_Result_12_fu_2079_p3;
wire   [0:0] xor_ln899_fu_2073_p2;
wire   [0:0] select_ln896_fu_2093_p3;
wire   [0:0] and_ln899_1_fu_2107_p2;
wire   [63:0] zext_ln907_fu_2131_p1;
wire   [63:0] zext_ln908_fu_2134_p1;
wire   [63:0] zext_ln909_fu_2143_p1;
wire   [63:0] lshr_ln908_fu_2137_p2;
wire   [63:0] shl_ln909_fu_2146_p2;
wire   [63:0] m_2_fu_2152_p3;
wire   [63:0] zext_ln911_fu_2159_p1;
wire   [63:0] m_3_fu_2162_p2;
wire   [62:0] m_8_fu_2168_p4;
wire   [0:0] p_Result_s_fu_2182_p3;
wire   [10:0] sub_ln915_fu_2198_p2;
wire   [10:0] select_ln893_fu_2190_p3;
wire   [10:0] add_ln915_fu_2203_p2;
wire   [63:0] zext_ln912_fu_2178_p1;
wire   [11:0] tmp_s_fu_2209_p3;
wire   [63:0] p_Result_13_fu_2216_p5;
wire   [51:0] trunc_ln6_fu_2233_p4;
wire   [0:0] or_ln1506_fu_2255_p2;
wire   [0:0] grp_fu_1475_p2;
wire  signed [31:0] mul_ln708_fu_2389_p1;
wire  signed [31:0] mul_ln1192_2_fu_2398_p1;
wire   [39:0] mul_ln708_fu_2389_p2;
wire   [31:0] tmp_25_fu_2403_p4;
wire   [39:0] shl_ln_fu_2413_p3;
wire   [39:0] mul_ln1192_2_fu_2398_p2;
wire  signed [31:0] mul_ln703_fu_2431_p1;
wire   [39:0] add_ln1192_fu_2421_p2;
wire   [31:0] tmp_26_fu_2436_p4;
wire   [39:0] shl_ln728_1_fu_2446_p3;
wire   [39:0] mul_ln703_fu_2431_p2;
wire  signed [31:0] mul_ln703_1_fu_2464_p1;
wire   [39:0] add_ln1192_1_fu_2454_p2;
wire  signed [31:0] mul_ln1192_3_fu_2483_p1;
wire  signed [31:0] mul_ln703_2_fu_2492_p1;
wire   [39:0] shl_ln728_2_fu_2497_p3;
wire   [39:0] add_ln1192_2_fu_2504_p2;
wire   [31:0] tmp_28_fu_2509_p4;
wire   [39:0] shl_ln728_3_fu_2519_p3;
wire   [39:0] add_ln1192_3_fu_2527_p2;
wire   [31:0] tmp_29_fu_2532_p4;
wire   [39:0] shl_ln728_4_fu_2542_p3;
wire  signed [31:0] mul_ln703_3_fu_2559_p1;
wire   [39:0] add_ln1192_4_fu_2550_p2;
wire   [31:0] tmp_30_fu_2564_p4;
wire   [39:0] shl_ln728_5_fu_2574_p3;
wire   [39:0] mul_ln703_3_fu_2559_p2;
wire  signed [31:0] mul_ln1192_4_fu_2592_p1;
wire   [39:0] add_ln1192_5_fu_2582_p2;
wire   [31:0] tmp_31_fu_2597_p4;
wire   [39:0] shl_ln728_6_fu_2607_p3;
wire   [39:0] mul_ln1192_4_fu_2592_p2;
wire  signed [31:0] mul_ln1192_5_fu_2625_p1;
wire   [39:0] add_ln1192_6_fu_2615_p2;
wire  signed [31:0] mul_ln1192_6_fu_2644_p1;
wire  signed [31:0] mul_ln703_4_fu_2653_p1;
wire   [39:0] shl_ln728_7_fu_2658_p3;
wire   [39:0] add_ln1192_7_fu_2665_p2;
wire   [31:0] tmp_33_fu_2670_p4;
wire   [39:0] shl_ln728_8_fu_2680_p3;
wire   [39:0] add_ln1192_8_fu_2688_p2;
wire   [31:0] tmp_34_fu_2693_p4;
wire   [39:0] shl_ln728_9_fu_2703_p3;
wire  signed [31:0] mul_ln703_5_fu_2720_p1;
wire   [39:0] add_ln1192_9_fu_2711_p2;
wire   [31:0] tmp_35_fu_2725_p4;
wire   [39:0] shl_ln728_s_fu_2735_p3;
wire   [39:0] mul_ln703_5_fu_2720_p2;
wire  signed [31:0] mul_ln703_6_fu_2753_p1;
wire   [39:0] add_ln1192_10_fu_2743_p2;
wire   [31:0] tmp_36_fu_2758_p4;
wire   [39:0] shl_ln728_10_fu_2768_p3;
wire   [39:0] mul_ln703_6_fu_2753_p2;
wire  signed [31:0] mul_ln1192_7_fu_2786_p1;
wire   [39:0] add_ln1192_11_fu_2776_p2;
wire  signed [31:0] mul_ln1192_8_fu_2805_p1;
wire  signed [31:0] mul_ln703_7_fu_2814_p1;
wire   [39:0] shl_ln728_11_fu_2819_p3;
wire   [39:0] add_ln1192_12_fu_2826_p2;
wire   [31:0] tmp_38_fu_2831_p4;
wire   [39:0] shl_ln728_12_fu_2841_p3;
wire   [39:0] add_ln1192_13_fu_2849_p2;
wire   [31:0] tmp_39_fu_2854_p4;
wire   [39:0] shl_ln728_13_fu_2864_p3;
wire  signed [31:0] mul_ln1192_9_fu_2881_p1;
wire   [39:0] add_ln1192_14_fu_2872_p2;
wire   [31:0] tmp_40_fu_2886_p4;
wire   [39:0] shl_ln728_14_fu_2896_p3;
wire   [39:0] mul_ln1192_9_fu_2881_p2;
wire  signed [31:0] mul_ln1192_10_fu_2914_p1;
wire   [39:0] add_ln1192_15_fu_2904_p2;
wire   [31:0] tmp_41_fu_2919_p4;
wire   [39:0] shl_ln728_15_fu_2929_p3;
wire   [39:0] mul_ln1192_10_fu_2914_p2;
wire  signed [31:0] mul_ln1192_11_fu_2947_p1;
wire   [39:0] add_ln1192_16_fu_2937_p2;
wire  signed [31:0] mul_ln703_8_fu_2966_p1;
wire  signed [31:0] mul_ln1192_12_fu_2975_p1;
wire   [39:0] shl_ln728_16_fu_2980_p3;
wire   [39:0] add_ln1192_17_fu_2987_p2;
wire   [31:0] tmp_43_fu_2992_p4;
wire   [39:0] shl_ln728_17_fu_3002_p3;
wire   [39:0] add_ln1192_18_fu_3010_p2;
wire   [31:0] tmp_44_fu_3015_p4;
wire   [39:0] shl_ln728_18_fu_3025_p3;
wire  signed [31:0] mul_ln703_9_fu_3042_p1;
wire   [39:0] add_ln1192_19_fu_3033_p2;
wire   [31:0] tmp_45_fu_3047_p4;
wire   [39:0] shl_ln728_19_fu_3057_p3;
wire   [39:0] mul_ln703_9_fu_3042_p2;
wire  signed [31:0] mul_ln703_10_fu_3075_p1;
wire   [39:0] add_ln1192_20_fu_3065_p2;
wire   [31:0] tmp_46_fu_3080_p4;
wire   [39:0] shl_ln728_20_fu_3090_p3;
wire   [39:0] mul_ln703_10_fu_3075_p2;
wire  signed [31:0] mul_ln1192_13_fu_3108_p1;
wire   [39:0] add_ln1192_21_fu_3098_p2;
wire  signed [31:0] mul_ln1192_14_fu_3127_p1;
wire  signed [31:0] mul_ln1192_15_fu_3136_p1;
wire   [39:0] shl_ln728_21_fu_3141_p3;
wire   [39:0] add_ln1192_22_fu_3148_p2;
wire   [31:0] tmp_48_fu_3153_p4;
wire   [39:0] shl_ln728_22_fu_3163_p3;
wire   [39:0] add_ln1192_23_fu_3171_p2;
wire   [31:0] tmp_49_fu_3176_p4;
wire   [39:0] shl_ln728_23_fu_3186_p3;
wire  signed [31:0] mul_ln703_11_fu_3203_p1;
wire   [39:0] add_ln1192_24_fu_3194_p2;
wire   [31:0] tmp_50_fu_3208_p4;
wire   [39:0] shl_ln728_24_fu_3218_p3;
wire   [39:0] mul_ln703_11_fu_3203_p2;
wire  signed [31:0] mul_ln1192_16_fu_3236_p1;
wire   [39:0] add_ln1192_25_fu_3226_p2;
wire   [31:0] tmp_51_fu_3241_p4;
wire   [39:0] shl_ln728_25_fu_3251_p3;
wire   [39:0] mul_ln1192_16_fu_3236_p2;
wire  signed [31:0] mul_ln1192_17_fu_3269_p1;
wire   [39:0] add_ln1192_26_fu_3259_p2;
wire  signed [31:0] mul_ln703_12_fu_3288_p1;
wire   [39:0] shl_ln728_26_fu_3293_p3;
wire  signed [39:0] sext_ln1192_36_fu_3300_p1;
wire   [39:0] add_ln1192_27_fu_3303_p2;
wire   [31:0] tmp_53_fu_3309_p4;
wire   [39:0] shl_ln728_27_fu_3319_p3;
wire  signed [31:0] mul_ln703_13_fu_3335_p1;
wire   [39:0] add_ln1192_28_fu_3327_p2;
wire   [31:0] tmp_54_fu_3340_p4;
wire   [39:0] shl_ln728_28_fu_3350_p3;
wire   [39:0] mul_ln703_13_fu_3335_p2;
wire  signed [31:0] mul_ln703_14_fu_3368_p1;
wire   [39:0] add_ln1192_29_fu_3358_p2;
wire   [31:0] tmp_55_fu_3373_p4;
wire   [39:0] shl_ln728_29_fu_3383_p3;
wire   [39:0] mul_ln703_14_fu_3368_p2;
wire   [39:0] add_ln1192_30_fu_3391_p2;
wire   [31:0] tmp_V_2_fu_3439_p2;
reg   [31:0] p_Result_15_fu_3453_p4;
reg   [31:0] l_1_fu_3463_p3;
wire   [31:0] sub_ln894_1_fu_3471_p2;
wire   [31:0] lsb_index_1_fu_3477_p2;
wire   [30:0] tmp_78_fu_3483_p4;
wire   [5:0] trunc_ln897_1_fu_3499_p1;
wire   [5:0] sub_ln897_1_fu_3503_p2;
wire   [31:0] zext_ln897_1_fu_3509_p1;
wire   [31:0] lshr_ln897_1_fu_3513_p2;
wire   [31:0] shl_ln899_1_fu_3519_p2;
wire   [31:0] or_ln899_fu_3525_p2;
wire   [31:0] and_ln899_2_fu_3531_p2;
wire   [0:0] tmp_79_fu_3543_p3;
wire   [0:0] icmp_ln896_1_fu_3493_p2;
wire   [0:0] icmp_ln899_1_fu_3537_p2;
wire   [0:0] p_Result_16_fu_3557_p3;
wire   [0:0] xor_ln899_1_fu_3551_p2;
wire   [0:0] select_ln896_1_fu_3571_p3;
wire   [0:0] and_ln899_3_fu_3585_p2;
wire   [63:0] zext_ln907_1_fu_3609_p1;
wire   [63:0] zext_ln908_1_fu_3612_p1;
wire   [63:0] zext_ln909_1_fu_3621_p1;
wire   [63:0] lshr_ln908_1_fu_3615_p2;
wire   [63:0] shl_ln909_1_fu_3624_p2;
wire   [63:0] m_4_fu_3630_p3;
wire   [63:0] zext_ln911_1_fu_3637_p1;
wire   [63:0] m_5_fu_3640_p2;
wire   [62:0] m_fu_3646_p4;
wire   [0:0] p_Result_5_fu_3660_p3;
wire   [10:0] sub_ln915_1_fu_3676_p2;
wire   [10:0] select_ln893_1_fu_3668_p3;
wire   [10:0] add_ln915_1_fu_3681_p2;
wire   [63:0] zext_ln912_1_fu_3656_p1;
wire   [11:0] tmp_1_fu_3687_p3;
wire   [63:0] p_Result_17_fu_3694_p5;
wire   [51:0] trunc_ln1506_1_fu_3711_p4;
wire   [0:0] or_ln1506_1_fu_3733_p2;
wire  signed [31:0] tmp_3_fu_3810_p5;
wire  signed [31:0] mul_ln1118_fu_3826_p1;
wire  signed [31:0] tmp_4_fu_3831_p5;
wire  signed [31:0] mul_ln1118_1_fu_3847_p1;
wire   [39:0] mul_ln1118_fu_3826_p2;
wire   [31:0] tmp_56_fu_3852_p4;
wire   [39:0] shl_ln728_30_fu_3862_p3;
wire   [39:0] mul_ln1118_1_fu_3847_p2;
wire  signed [31:0] tmp_5_fu_3876_p5;
wire  signed [31:0] mul_ln1118_2_fu_3892_p1;
wire   [39:0] add_ln1192_33_fu_3870_p2;
wire   [31:0] tmp_57_fu_3897_p4;
wire   [39:0] shl_ln728_31_fu_3907_p3;
wire   [39:0] mul_ln1118_2_fu_3892_p2;
wire  signed [31:0] tmp_6_fu_3921_p5;
wire  signed [31:0] mul_ln1118_3_fu_3937_p1;
wire   [39:0] add_ln1192_34_fu_3915_p2;
wire  signed [31:0] tmp_7_fu_3952_p5;
wire  signed [31:0] mul_ln1118_4_fu_3968_p1;
wire  signed [31:0] tmp_8_fu_3973_p5;
wire  signed [31:0] mul_ln1118_5_fu_3989_p1;
wire   [39:0] shl_ln728_32_fu_3994_p3;
wire   [39:0] add_ln1192_35_fu_4001_p2;
wire   [31:0] tmp_59_fu_4006_p4;
wire   [39:0] shl_ln728_33_fu_4016_p3;
wire   [39:0] add_ln1192_36_fu_4024_p2;
wire   [31:0] tmp_60_fu_4029_p4;
wire   [39:0] shl_ln728_34_fu_4039_p3;
wire  signed [31:0] tmp_9_fu_4052_p5;
wire  signed [31:0] mul_ln1118_6_fu_4068_p1;
wire   [39:0] add_ln1192_37_fu_4047_p2;
wire   [31:0] tmp_61_fu_4073_p4;
wire   [39:0] shl_ln728_35_fu_4083_p3;
wire   [39:0] mul_ln1118_6_fu_4068_p2;
wire  signed [31:0] tmp_10_fu_4097_p5;
wire  signed [31:0] mul_ln1118_7_fu_4113_p1;
wire   [39:0] add_ln1192_38_fu_4091_p2;
wire   [31:0] tmp_62_fu_4118_p4;
wire   [39:0] shl_ln728_36_fu_4128_p3;
wire   [39:0] mul_ln1118_7_fu_4113_p2;
wire  signed [31:0] tmp_11_fu_4142_p5;
wire  signed [31:0] mul_ln1118_8_fu_4158_p1;
wire   [39:0] add_ln1192_39_fu_4136_p2;
wire  signed [31:0] tmp_12_fu_4173_p5;
wire  signed [31:0] mul_ln1118_9_fu_4189_p1;
wire  signed [31:0] tmp_13_fu_4194_p5;
wire  signed [31:0] mul_ln1118_10_fu_4210_p1;
wire   [39:0] shl_ln728_37_fu_4215_p3;
wire   [39:0] add_ln1192_40_fu_4222_p2;
wire   [31:0] tmp_64_fu_4227_p4;
wire   [39:0] shl_ln728_38_fu_4237_p3;
wire   [39:0] add_ln1192_41_fu_4245_p2;
wire   [31:0] tmp_65_fu_4250_p4;
wire   [39:0] shl_ln728_39_fu_4260_p3;
wire  signed [31:0] tmp_14_fu_4273_p5;
wire  signed [31:0] mul_ln1118_11_fu_4289_p1;
wire   [39:0] add_ln1192_42_fu_4268_p2;
wire   [31:0] tmp_66_fu_4294_p4;
wire   [39:0] shl_ln728_40_fu_4304_p3;
wire   [39:0] mul_ln1118_11_fu_4289_p2;
wire  signed [31:0] tmp_15_fu_4318_p5;
wire  signed [31:0] mul_ln1118_12_fu_4334_p1;
wire   [39:0] add_ln1192_43_fu_4312_p2;
wire   [31:0] tmp_67_fu_4339_p4;
wire   [39:0] shl_ln728_41_fu_4349_p3;
wire   [39:0] mul_ln1118_12_fu_4334_p2;
wire  signed [31:0] tmp_16_fu_4363_p5;
wire  signed [31:0] mul_ln1118_13_fu_4379_p1;
wire   [39:0] add_ln1192_44_fu_4357_p2;
wire   [39:0] shl_ln728_42_fu_4406_p3;
wire  signed [31:0] mul_ln1118_14_fu_4421_p1;
wire   [39:0] add_ln1192_45_fu_4413_p2;
wire   [31:0] tmp_69_fu_4426_p4;
wire   [39:0] shl_ln728_43_fu_4436_p3;
wire   [39:0] mul_ln1118_14_fu_4421_p2;
wire  signed [31:0] tmp_18_fu_4450_p5;
wire  signed [31:0] mul_ln1118_15_fu_4466_p1;
wire   [39:0] add_ln1192_46_fu_4444_p2;
wire   [31:0] tmp_70_fu_4471_p4;
wire   [39:0] shl_ln728_44_fu_4481_p3;
wire   [39:0] mul_ln1118_15_fu_4466_p2;
wire   [39:0] add_ln1192_47_fu_4489_p2;
wire   [31:0] tmp_19_fu_4541_p5;
wire   [0:0] icmp_ln1494_fu_4553_p2;
wire   [9:0] shl_ln1_fu_4567_p3;
wire   [31:0] zext_ln111_fu_4575_p1;
wire    ap_CS_fsm_state61;
wire   [7:0] trunc_ln851_fu_4605_p1;
wire   [23:0] ret_V_2_fu_4587_p4;
wire   [0:0] icmp_ln851_fu_4609_p2;
wire   [23:0] ret_V_3_fu_4615_p2;
wire   [0:0] p_Result_7_fu_4597_p3;
wire   [23:0] select_ln850_fu_4621_p3;
wire   [23:0] ret_V_5_fu_4629_p3;
wire    ap_block_pp2_stage0_00001;
wire    ap_block_pp4_stage0_00001;
reg   [39:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter3 = 1'b0;
end

nn_inference_weights_layer1_weights_V #(
    .DataWidth( 9 ),
    .AddressRange( 3200 ),
    .AddressWidth( 12 ))
weights_layer1_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_layer1_weights_V_address0),
    .ce0(weights_layer1_weights_V_ce0),
    .q0(weights_layer1_weights_V_q0),
    .address1(weights_layer1_weights_V_address1),
    .ce1(weights_layer1_weights_V_ce1),
    .q1(weights_layer1_weights_V_q1)
);

nn_inference_layer2_weights_V_0 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_0_address0),
    .ce0(layer2_weights_V_0_ce0),
    .q0(layer2_weights_V_0_q0)
);

nn_inference_layer2_weights_V_1 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_1_address0),
    .ce0(layer2_weights_V_1_ce0),
    .q0(layer2_weights_V_1_q0)
);

nn_inference_layer2_weights_V_2 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_2_address0),
    .ce0(layer2_weights_V_2_ce0),
    .q0(layer2_weights_V_2_q0)
);

nn_inference_layer2_weights_V_3 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_3_address0),
    .ce0(layer2_weights_V_3_ce0),
    .q0(layer2_weights_V_3_q0)
);

nn_inference_layer2_weights_V_4 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_4_address0),
    .ce0(layer2_weights_V_4_ce0),
    .q0(layer2_weights_V_4_q0)
);

nn_inference_layer2_weights_V_5 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_5_address0),
    .ce0(layer2_weights_V_5_ce0),
    .q0(layer2_weights_V_5_q0)
);

nn_inference_layer2_weights_V_6 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_6_address0),
    .ce0(layer2_weights_V_6_ce0),
    .q0(layer2_weights_V_6_q0)
);

nn_inference_layer2_weights_V_7 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_7_address0),
    .ce0(layer2_weights_V_7_ce0),
    .q0(layer2_weights_V_7_q0)
);

nn_inference_layer2_weights_V_8 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_8_address0),
    .ce0(layer2_weights_V_8_ce0),
    .q0(layer2_weights_V_8_q0)
);

nn_inference_layer2_weights_V_9 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_9_address0),
    .ce0(layer2_weights_V_9_ce0),
    .q0(layer2_weights_V_9_q0)
);

nn_inference_layer2_weights_V_10 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_10_address0),
    .ce0(layer2_weights_V_10_ce0),
    .q0(layer2_weights_V_10_q0)
);

nn_inference_layer2_weights_V_11 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_11_address0),
    .ce0(layer2_weights_V_11_ce0),
    .q0(layer2_weights_V_11_q0)
);

nn_inference_layer2_weights_V_12 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_12_address0),
    .ce0(layer2_weights_V_12_ce0),
    .q0(layer2_weights_V_12_q0)
);

nn_inference_layer2_weights_V_13 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_13_address0),
    .ce0(layer2_weights_V_13_ce0),
    .q0(layer2_weights_V_13_q0)
);

nn_inference_layer2_weights_V_14 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_14_address0),
    .ce0(layer2_weights_V_14_ce0),
    .q0(layer2_weights_V_14_q0)
);

nn_inference_layer2_weights_V_15 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_15_address0),
    .ce0(layer2_weights_V_15_ce0),
    .q0(layer2_weights_V_15_q0)
);

nn_inference_layer2_weights_V_16 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_16_address0),
    .ce0(layer2_weights_V_16_ce0),
    .q0(layer2_weights_V_16_q0)
);

nn_inference_layer2_weights_V_17 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_17_address0),
    .ce0(layer2_weights_V_17_ce0),
    .q0(layer2_weights_V_17_q0)
);

nn_inference_layer2_weights_V_18 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_18_address0),
    .ce0(layer2_weights_V_18_ce0),
    .q0(layer2_weights_V_18_q0)
);

nn_inference_layer2_weights_V_19 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_19_address0),
    .ce0(layer2_weights_V_19_ce0),
    .q0(layer2_weights_V_19_q0)
);

nn_inference_layer2_weights_V_20 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_20_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_20_address0),
    .ce0(layer2_weights_V_20_ce0),
    .q0(layer2_weights_V_20_q0)
);

nn_inference_layer2_weights_V_21 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_21_address0),
    .ce0(layer2_weights_V_21_ce0),
    .q0(layer2_weights_V_21_q0)
);

nn_inference_layer2_weights_V_22 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_22_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_22_address0),
    .ce0(layer2_weights_V_22_ce0),
    .q0(layer2_weights_V_22_q0)
);

nn_inference_layer2_weights_V_23 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_23_address0),
    .ce0(layer2_weights_V_23_ce0),
    .q0(layer2_weights_V_23_q0)
);

nn_inference_layer2_weights_V_24 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_24_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_24_address0),
    .ce0(layer2_weights_V_24_ce0),
    .q0(layer2_weights_V_24_q0)
);

nn_inference_layer2_weights_V_25 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_25_address0),
    .ce0(layer2_weights_V_25_ce0),
    .q0(layer2_weights_V_25_q0)
);

nn_inference_layer2_weights_V_26 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_26_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_26_address0),
    .ce0(layer2_weights_V_26_ce0),
    .q0(layer2_weights_V_26_q0)
);

nn_inference_layer2_weights_V_27 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_27_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_27_address0),
    .ce0(layer2_weights_V_27_ce0),
    .q0(layer2_weights_V_27_q0)
);

nn_inference_layer2_weights_V_28 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_28_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_28_address0),
    .ce0(layer2_weights_V_28_ce0),
    .q0(layer2_weights_V_28_q0)
);

nn_inference_layer2_weights_V_29 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_29_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_29_address0),
    .ce0(layer2_weights_V_29_ce0),
    .q0(layer2_weights_V_29_q0)
);

nn_inference_layer2_weights_V_30 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_30_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_30_address0),
    .ce0(layer2_weights_V_30_ce0),
    .q0(layer2_weights_V_30_q0)
);

nn_inference_layer2_weights_V_31 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_31_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_31_address0),
    .ce0(layer2_weights_V_31_ce0),
    .q0(layer2_weights_V_31_q0)
);

nn_inference_fp_input_img_V #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
fp_input_img_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fp_input_img_V_address0),
    .ce0(fp_input_img_V_ce0),
    .we0(fp_input_img_V_we0),
    .d0(fp_input_img_V_d0),
    .q0(fp_input_img_V_q0),
    .address1(fp_input_img_V_address1),
    .ce1(fp_input_img_V_ce1),
    .q1(fp_input_img_V_q1)
);

nn_inference_temp_output_0_V #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
temp_output_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output_0_V_address0),
    .ce0(temp_output_0_V_ce0),
    .we0(temp_output_0_V_we0),
    .d0(temp_output_0_V_d0),
    .q0(temp_output_0_V_q0),
    .address1(temp_output_0_V_address1),
    .ce1(temp_output_0_V_ce1),
    .q1(temp_output_0_V_q1)
);

nn_inference_temp_output2_0_V #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
temp_output2_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output2_0_V_address0),
    .ce0(temp_output2_0_V_ce0),
    .we0(temp_output2_0_V_we0),
    .d0(temp_output2_0_V_d0),
    .q0(temp_output2_0_V_q0),
    .address1(temp_output2_0_V_address1),
    .ce1(temp_output2_0_V_ce1),
    .q1(temp_output2_0_V_q1)
);

nn_inference_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1472_p0),
    .ce(1'b1),
    .dout(grp_fu_1472_p1)
);

nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1475_p0),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_1475_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U3(
    .din0(weights_layer1_weights_V_q1),
    .din1(fp_input_img_V_q1),
    .dout(mul_ln1192_fu_1847_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U4(
    .din0(weights_layer1_weights_V_q0),
    .din1(r_V_1_reg_4764),
    .dout(mul_ln1192_1_fu_1890_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U5(
    .din0(layer2_weights_V_0_q0),
    .din1(mul_ln708_fu_2389_p1),
    .dout(mul_ln708_fu_2389_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U6(
    .din0(layer2_weights_V_1_q0),
    .din1(mul_ln1192_2_fu_2398_p1),
    .dout(mul_ln1192_2_fu_2398_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U7(
    .din0(layer2_weights_V_2_q0),
    .din1(mul_ln703_fu_2431_p1),
    .dout(mul_ln703_fu_2431_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U8(
    .din0(layer2_weights_V_3_q0),
    .din1(mul_ln703_1_fu_2464_p1),
    .dout(mul_ln703_1_fu_2464_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U9(
    .din0(layer2_weights_V_4_q0),
    .din1(mul_ln1192_3_fu_2483_p1),
    .dout(mul_ln1192_3_fu_2483_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U10(
    .din0(layer2_weights_V_5_q0),
    .din1(mul_ln703_2_fu_2492_p1),
    .dout(mul_ln703_2_fu_2492_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U11(
    .din0(layer2_weights_V_6_q0),
    .din1(mul_ln703_3_fu_2559_p1),
    .dout(mul_ln703_3_fu_2559_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U12(
    .din0(layer2_weights_V_7_q0),
    .din1(mul_ln1192_4_fu_2592_p1),
    .dout(mul_ln1192_4_fu_2592_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U13(
    .din0(layer2_weights_V_8_q0),
    .din1(mul_ln1192_5_fu_2625_p1),
    .dout(mul_ln1192_5_fu_2625_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U14(
    .din0(layer2_weights_V_9_q0),
    .din1(mul_ln1192_6_fu_2644_p1),
    .dout(mul_ln1192_6_fu_2644_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U15(
    .din0(layer2_weights_V_10_q0),
    .din1(mul_ln703_4_fu_2653_p1),
    .dout(mul_ln703_4_fu_2653_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U16(
    .din0(layer2_weights_V_11_q0),
    .din1(mul_ln703_5_fu_2720_p1),
    .dout(mul_ln703_5_fu_2720_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U17(
    .din0(layer2_weights_V_12_q0),
    .din1(mul_ln703_6_fu_2753_p1),
    .dout(mul_ln703_6_fu_2753_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U18(
    .din0(layer2_weights_V_13_q0),
    .din1(mul_ln1192_7_fu_2786_p1),
    .dout(mul_ln1192_7_fu_2786_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U19(
    .din0(layer2_weights_V_14_q0),
    .din1(mul_ln1192_8_fu_2805_p1),
    .dout(mul_ln1192_8_fu_2805_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U20(
    .din0(layer2_weights_V_15_q0),
    .din1(mul_ln703_7_fu_2814_p1),
    .dout(mul_ln703_7_fu_2814_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U21(
    .din0(layer2_weights_V_16_q0),
    .din1(mul_ln1192_9_fu_2881_p1),
    .dout(mul_ln1192_9_fu_2881_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U22(
    .din0(layer2_weights_V_17_q0),
    .din1(mul_ln1192_10_fu_2914_p1),
    .dout(mul_ln1192_10_fu_2914_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U23(
    .din0(layer2_weights_V_18_q0),
    .din1(mul_ln1192_11_fu_2947_p1),
    .dout(mul_ln1192_11_fu_2947_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U24(
    .din0(layer2_weights_V_19_q0),
    .din1(mul_ln703_8_fu_2966_p1),
    .dout(mul_ln703_8_fu_2966_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U25(
    .din0(layer2_weights_V_20_q0),
    .din1(mul_ln1192_12_fu_2975_p1),
    .dout(mul_ln1192_12_fu_2975_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U26(
    .din0(layer2_weights_V_21_q0),
    .din1(mul_ln703_9_fu_3042_p1),
    .dout(mul_ln703_9_fu_3042_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U27(
    .din0(layer2_weights_V_22_q0),
    .din1(mul_ln703_10_fu_3075_p1),
    .dout(mul_ln703_10_fu_3075_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U28(
    .din0(layer2_weights_V_23_q0),
    .din1(mul_ln1192_13_fu_3108_p1),
    .dout(mul_ln1192_13_fu_3108_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U29(
    .din0(layer2_weights_V_24_q0),
    .din1(mul_ln1192_14_fu_3127_p1),
    .dout(mul_ln1192_14_fu_3127_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U30(
    .din0(layer2_weights_V_25_q0),
    .din1(mul_ln1192_15_fu_3136_p1),
    .dout(mul_ln1192_15_fu_3136_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U31(
    .din0(layer2_weights_V_26_q0),
    .din1(mul_ln703_11_fu_3203_p1),
    .dout(mul_ln703_11_fu_3203_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U32(
    .din0(layer2_weights_V_27_q0),
    .din1(mul_ln1192_16_fu_3236_p1),
    .dout(mul_ln1192_16_fu_3236_p2)
);

nn_inference_mul_9s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_9s_32s_39_1_1_U33(
    .din0(layer2_weights_V_28_q0),
    .din1(mul_ln1192_17_fu_3269_p1),
    .dout(mul_ln1192_17_fu_3269_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U34(
    .din0(layer2_weights_V_29_q0),
    .din1(mul_ln703_12_fu_3288_p1),
    .dout(mul_ln703_12_fu_3288_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U35(
    .din0(layer2_weights_V_30_load_reg_5621),
    .din1(mul_ln703_13_fu_3335_p1),
    .dout(mul_ln703_13_fu_3335_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U36(
    .din0(layer2_weights_V_31_q0),
    .din1(mul_ln703_14_fu_3368_p1),
    .dout(mul_ln703_14_fu_3368_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U37(
    .din0(32'd10),
    .din1(32'd4294967059),
    .din2(32'd226),
    .din3(ap_phi_mux_j_2_phi_fu_1430_p4),
    .dout(tmp_3_fu_3810_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U38(
    .din0(tmp_3_fu_3810_p5),
    .din1(mul_ln1118_fu_3826_p1),
    .dout(mul_ln1118_fu_3826_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U39(
    .din0(32'd4294966965),
    .din1(32'd250),
    .din2(32'd38),
    .din3(ap_phi_mux_j_2_phi_fu_1430_p4),
    .dout(tmp_4_fu_3831_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U40(
    .din0(tmp_4_fu_3831_p5),
    .din1(mul_ln1118_1_fu_3847_p1),
    .dout(mul_ln1118_1_fu_3847_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U41(
    .din0(32'd71),
    .din1(32'd86),
    .din2(32'd68),
    .din3(ap_phi_mux_j_2_phi_fu_1430_p4),
    .dout(tmp_5_fu_3876_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U42(
    .din0(tmp_5_fu_3876_p5),
    .din1(mul_ln1118_2_fu_3892_p1),
    .dout(mul_ln1118_2_fu_3892_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U43(
    .din0(32'd101),
    .din1(32'd39),
    .din2(32'd4294967051),
    .din3(ap_phi_mux_j_2_phi_fu_1430_p4),
    .dout(tmp_6_fu_3921_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U44(
    .din0(tmp_6_fu_3921_p5),
    .din1(mul_ln1118_3_fu_3937_p1),
    .dout(mul_ln1118_3_fu_3937_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U45(
    .din0(32'd183),
    .din1(32'd69),
    .din2(32'd4294966998),
    .din3(ap_phi_mux_j_2_phi_fu_1430_p4),
    .dout(tmp_7_fu_3952_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U46(
    .din0(tmp_7_fu_3952_p5),
    .din1(mul_ln1118_4_fu_3968_p1),
    .dout(mul_ln1118_4_fu_3968_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U47(
    .din0(32'd169),
    .din1(32'd161),
    .din2(32'd4294967054),
    .din3(ap_phi_mux_j_2_phi_fu_1430_p4),
    .dout(tmp_8_fu_3973_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U48(
    .din0(tmp_8_fu_3973_p5),
    .din1(mul_ln1118_5_fu_3989_p1),
    .dout(mul_ln1118_5_fu_3989_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U49(
    .din0(32'd4294967021),
    .din1(32'd89),
    .din2(32'd130),
    .din3(j_2_reg_1426),
    .dout(tmp_9_fu_4052_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U50(
    .din0(tmp_9_fu_4052_p5),
    .din1(mul_ln1118_6_fu_4068_p1),
    .dout(mul_ln1118_6_fu_4068_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U51(
    .din0(32'd4294967034),
    .din1(32'd240),
    .din2(32'd32),
    .din3(j_2_reg_1426),
    .dout(tmp_10_fu_4097_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U52(
    .din0(tmp_10_fu_4097_p5),
    .din1(mul_ln1118_7_fu_4113_p1),
    .dout(mul_ln1118_7_fu_4113_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U53(
    .din0(32'd83),
    .din1(32'd4294967177),
    .din2(32'd4294967224),
    .din3(j_2_reg_1426),
    .dout(tmp_11_fu_4142_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U54(
    .din0(tmp_11_fu_4142_p5),
    .din1(mul_ln1118_8_fu_4158_p1),
    .dout(mul_ln1118_8_fu_4158_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U55(
    .din0(32'd4294967156),
    .din1(32'd139),
    .din2(32'd74),
    .din3(j_2_reg_1426),
    .dout(tmp_12_fu_4173_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U56(
    .din0(tmp_12_fu_4173_p5),
    .din1(mul_ln1118_9_fu_4189_p1),
    .dout(mul_ln1118_9_fu_4189_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U57(
    .din0(32'd4294966941),
    .din1(32'd168),
    .din2(32'd181),
    .din3(j_2_reg_1426),
    .dout(tmp_13_fu_4194_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U58(
    .din0(tmp_13_fu_4194_p5),
    .din1(mul_ln1118_10_fu_4210_p1),
    .dout(mul_ln1118_10_fu_4210_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U59(
    .din0(32'd4294967287),
    .din1(32'd125),
    .din2(32'd106),
    .din3(j_2_reg_1426_pp5_iter1_reg),
    .dout(tmp_14_fu_4273_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U60(
    .din0(tmp_14_fu_4273_p5),
    .din1(mul_ln1118_11_fu_4289_p1),
    .dout(mul_ln1118_11_fu_4289_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U61(
    .din0(32'd4294967248),
    .din1(32'd4294967179),
    .din2(32'd55),
    .din3(j_2_reg_1426_pp5_iter1_reg),
    .dout(tmp_15_fu_4318_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U62(
    .din0(tmp_15_fu_4318_p5),
    .din1(mul_ln1118_12_fu_4334_p1),
    .dout(mul_ln1118_12_fu_4334_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U63(
    .din0(32'd4294967272),
    .din1(32'd79),
    .din2(32'd4294967257),
    .din3(j_2_reg_1426_pp5_iter1_reg),
    .dout(tmp_16_fu_4363_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U64(
    .din0(tmp_16_fu_4363_p5),
    .din1(mul_ln1118_13_fu_4379_p1),
    .dout(mul_ln1118_13_fu_4379_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U65(
    .din0(32'd63),
    .din1(32'd59),
    .din2(32'd37),
    .din3(j_2_reg_1426_pp5_iter1_reg),
    .dout(tmp_17_fu_4394_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U66(
    .din0(tmp_17_reg_6006),
    .din1(mul_ln1118_14_fu_4421_p1),
    .dout(mul_ln1118_14_fu_4421_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U67(
    .din0(32'd4294967170),
    .din1(32'd140),
    .din2(32'd9),
    .din3(j_2_reg_1426_pp5_iter2_reg),
    .dout(tmp_18_fu_4450_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U68(
    .din0(tmp_18_fu_4450_p5),
    .din1(mul_ln1118_15_fu_4466_p1),
    .dout(mul_ln1118_15_fu_4466_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U69(
    .din0(temp_output3_0_2_V_fu_406),
    .din1(temp_output3_0_2_V_1_fu_410),
    .din2(temp_output3_0_2_V_2_fu_414),
    .din3(i_3_reg_1438),
    .dout(tmp_19_fu_4541_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln21_fu_1774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((((icmp_ln21_fu_1774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state9)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state9))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((icmp_ln21_fu_1774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state12))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln21_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state12)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end else if (((icmp_ln21_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state33))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state33)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state33);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp3_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state42))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state42)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state42);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            ap_enable_reg_pp4_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state55))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state55)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state55);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            ap_enable_reg_pp5_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_1_reg_1393 <= 6'd0;
    end else if (((icmp_ln77_fu_1936_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_1_reg_1393 <= add_ln77_fu_1930_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        i_2_reg_1415 <= 5'd0;
    end else if (((icmp_ln92_fu_3414_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i_2_reg_1415 <= add_ln92_fu_3408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        i_3_reg_1438 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state60) & (icmp_ln109_fu_4526_p2 == 1'd0))) begin
        i_3_reg_1438 <= add_ln109_fu_4520_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_1346 <= 7'd0;
    end else if (((icmp_ln5_fu_1486_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_1346 <= add_ln5_fu_1480_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        j_1_reg_1404 <= 5'd0;
    end else if (((icmp_ln40_fu_2369_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j_1_reg_1404 <= add_ln40_fu_2363_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (icmp_ln59_reg_5952 == 1'd0))) begin
        j_2_reg_1426 <= add_ln59_reg_5947;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        j_2_reg_1426 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_1357 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_1357 <= add_ln21_reg_4706;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_1774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        k_reg_1369 <= 7'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_1788_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        k_reg_1369 <= add_ln25_fu_1794_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        max_idx_V_reg_1449 <= 32'd4294967040;
    end else if (((1'b1 == ap_CS_fsm_state60) & (icmp_ln109_fu_4526_p2 == 1'd0))) begin
        max_idx_V_reg_1449 <= max_idx_V_1_fu_4579_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        max_val_V_reg_1461 <= 32'd4294935040;
    end else if (((1'b1 == ap_CS_fsm_state60) & (icmp_ln109_fu_4526_p2 == 1'd0))) begin
        max_val_V_reg_1461 <= max_val_V_1_fu_4559_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_1774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sum_V_2_reg_1380 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln25_reg_4725_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_V_2_reg_1380 <= {{ret_V_1_fu_1914_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output3_0_2_V_fu_406 <= 32'd256;
    end else if (((j_2_reg_1426_pp5_iter2_reg == 2'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1))) begin
        temp_output3_0_2_V_fu_406 <= {{add_ln1192_47_fu_4489_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_4646_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        F2_reg_4688 <= F2_fu_1542_p2;
        icmp_ln571_reg_4680 <= icmp_ln571_fu_1536_p2;
        p_Result_8_reg_4670 <= ireg_fu_1502_p1[32'd63];
        trunc_ln565_reg_4675 <= trunc_ln565_fu_1532_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln21_reg_4706 <= add_ln21_fu_1768_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        add_ln59_reg_5947 <= add_ln59_fu_3798_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_1_fu_3425_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        add_ln908_1_reg_5665 <= add_ln908_1_fu_3579_p2;
        icmp_ln908_1_reg_5660 <= icmp_ln908_1_fu_3565_p2;
        p_Result_14_reg_5650 <= temp_output2_0_V_q1[32'd31];
        select_ln908_2_reg_5675 <= select_ln908_2_fu_3597_p3;
        sub_ln909_1_reg_5670 <= sub_ln909_1_fu_3591_p2;
        tmp_V_5_reg_5655 <= tmp_V_5_fu_3445_p3;
        trunc_ln893_1_reg_5680 <= trunc_ln893_1_fu_3605_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_fu_1947_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln908_reg_4808 <= add_ln908_fu_2101_p2;
        icmp_ln908_reg_4803 <= icmp_ln908_fu_2087_p2;
        p_Result_10_reg_4793 <= temp_output_0_V_q1[32'd31];
        select_ln908_reg_4818 <= select_ln908_fu_2119_p3;
        sub_ln909_reg_4813 <= sub_ln909_fu_2113_p2;
        tmp_V_4_reg_4798 <= tmp_V_4_fu_1967_p3;
        trunc_ln893_reg_4823 <= trunc_ln893_fu_2127_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_1486_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_4650[6 : 0] <= i_cast_fu_1492_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_4650_pp0_iter1_reg[6 : 0] <= i_cast_reg_4650[6 : 0];
        icmp_ln5_reg_4646 <= icmp_ln5_fu_1486_p2;
        icmp_ln5_reg_4646_pp0_iter1_reg <= icmp_ln5_reg_4646;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_cast_reg_4650_pp0_iter2_reg[6 : 0] <= i_cast_reg_4650_pp0_iter1_reg[6 : 0];
        icmp_ln5_reg_4646_pp0_iter2_reg <= icmp_ln5_reg_4646_pp0_iter1_reg;
        input_img_load_reg_4660_pp0_iter2_reg <= input_img_load_reg_4660;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_reg_4789 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln1506_1_reg_4838 <= icmp_ln1506_1_fu_2249_p2;
        icmp_ln1506_reg_4833 <= icmp_ln1506_fu_2243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_1_reg_5646 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln1506_2_reg_5690 <= icmp_ln1506_2_fu_3721_p2;
        icmp_ln1506_3_reg_5695 <= icmp_ln1506_3_fu_3727_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln25_reg_4725 <= icmp_ln25_fu_1788_p2;
        icmp_ln25_reg_4725_pp1_iter1_reg <= icmp_ln25_reg_4725;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln40_reg_5316 <= icmp_ln40_fu_2369_p2;
        icmp_ln40_reg_5316_pp3_iter1_reg <= icmp_ln40_reg_5316;
        j_1_cast_reg_5320_pp3_iter1_reg[4 : 0] <= j_1_cast_reg_5320[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln40_reg_5316_pp3_iter2_reg <= icmp_ln40_reg_5316_pp3_iter1_reg;
        icmp_ln40_reg_5316_pp3_iter3_reg <= icmp_ln40_reg_5316_pp3_iter2_reg;
        icmp_ln40_reg_5316_pp3_iter4_reg <= icmp_ln40_reg_5316_pp3_iter3_reg;
        icmp_ln40_reg_5316_pp3_iter5_reg <= icmp_ln40_reg_5316_pp3_iter4_reg;
        icmp_ln40_reg_5316_pp3_iter6_reg <= icmp_ln40_reg_5316_pp3_iter5_reg;
        j_1_cast_reg_5320_pp3_iter2_reg[4 : 0] <= j_1_cast_reg_5320_pp3_iter1_reg[4 : 0];
        j_1_cast_reg_5320_pp3_iter3_reg[4 : 0] <= j_1_cast_reg_5320_pp3_iter2_reg[4 : 0];
        j_1_cast_reg_5320_pp3_iter4_reg[4 : 0] <= j_1_cast_reg_5320_pp3_iter3_reg[4 : 0];
        j_1_cast_reg_5320_pp3_iter5_reg[4 : 0] <= j_1_cast_reg_5320_pp3_iter4_reg[4 : 0];
        j_1_cast_reg_5320_pp3_iter6_reg[4 : 0] <= j_1_cast_reg_5320_pp3_iter5_reg[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln59_reg_5952 <= icmp_ln59_fu_3804_p2;
        j_2_reg_1426_pp5_iter1_reg <= j_2_reg_1426;
        mul_ln1118_10_reg_5991 <= mul_ln1118_10_fu_4210_p2;
        mul_ln1118_8_reg_5976 <= mul_ln1118_8_fu_4158_p2;
        mul_ln1118_9_reg_5986 <= mul_ln1118_9_fu_4189_p2;
        tmp_63_reg_5981 <= {{add_ln1192_39_fu_4136_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln885_1_reg_5646 <= icmp_ln885_1_fu_3425_p2;
        temp_output2_0_V_addr_2_reg_5640_pp4_iter1_reg <= temp_output2_0_V_addr_2_reg_5640;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        icmp_ln885_1_reg_5646_pp4_iter2_reg <= icmp_ln885_1_reg_5646;
        temp_output2_0_V_addr_2_reg_5640_pp4_iter2_reg <= temp_output2_0_V_addr_2_reg_5640_pp4_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln885_reg_4789 <= icmp_ln885_fu_1947_p2;
        temp_output_0_V_addr_1_reg_4783_pp2_iter1_reg <= temp_output_0_V_addr_1_reg_4783;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln885_reg_4789_pp2_iter2_reg <= icmp_ln885_reg_4789;
        temp_output_0_V_addr_1_reg_4783_pp2_iter2_reg <= temp_output_0_V_addr_1_reg_4783_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_4646 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_img_load_reg_4660 <= input_img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_2369_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j_1_cast_reg_5320[4 : 0] <= j_1_cast_fu_2375_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp5_stage0_11001)) begin
        j_2_reg_1426_pp5_iter2_reg <= j_2_reg_1426_pp5_iter1_reg;
        mul_ln1118_13_reg_5996 <= mul_ln1118_13_fu_4379_p2;
        tmp_17_reg_6006 <= tmp_17_fu_4394_p5;
        tmp_68_reg_6001 <= {{add_ln1192_44_fu_4357_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5316_pp3_iter5_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        layer2_weights_V_30_load_reg_5621 <= layer2_weights_V_30_q0;
        mul_ln1192_17_reg_5606 <= mul_ln1192_17_fu_3269_p2;
        mul_ln703_12_reg_5616 <= mul_ln703_12_fu_3288_p2;
        tmp_52_reg_5611 <= {{add_ln1192_26_fu_3259_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln59_fu_3804_p2 == 1'd0))) begin
        mul_ln1118_3_reg_5956 <= mul_ln1118_3_fu_3937_p2;
        mul_ln1118_4_reg_5966 <= mul_ln1118_4_fu_3968_p2;
        mul_ln1118_5_reg_5971 <= mul_ln1118_5_fu_3989_p2;
        tmp_58_reg_5961 <= {{add_ln1192_34_fu_3915_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5316_pp3_iter3_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_11_reg_5516 <= mul_ln1192_11_fu_2947_p2;
        mul_ln1192_12_reg_5531 <= mul_ln1192_12_fu_2975_p2;
        mul_ln703_8_reg_5526 <= mul_ln703_8_fu_2966_p2;
        tmp_42_reg_5521 <= {{add_ln1192_16_fu_2937_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5316_pp3_iter4_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_13_reg_5561 <= mul_ln1192_13_fu_3108_p2;
        mul_ln1192_14_reg_5571 <= mul_ln1192_14_fu_3127_p2;
        mul_ln1192_15_reg_5576 <= mul_ln1192_15_fu_3136_p2;
        tmp_47_reg_5566 <= {{add_ln1192_21_fu_3098_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5316 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        mul_ln1192_3_reg_5391 <= mul_ln1192_3_fu_2483_p2;
        mul_ln703_1_reg_5381 <= mul_ln703_1_fu_2464_p2;
        mul_ln703_2_reg_5396 <= mul_ln703_2_fu_2492_p2;
        tmp_27_reg_5386 <= {{add_ln1192_1_fu_2454_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5316_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_5_reg_5426 <= mul_ln1192_5_fu_2625_p2;
        mul_ln1192_6_reg_5436 <= mul_ln1192_6_fu_2644_p2;
        mul_ln703_4_reg_5441 <= mul_ln703_4_fu_2653_p2;
        tmp_32_reg_5431 <= {{add_ln1192_6_fu_2615_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5316_pp3_iter2_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_7_reg_5471 <= mul_ln1192_7_fu_2786_p2;
        mul_ln1192_8_reg_5481 <= mul_ln1192_8_fu_2805_p2;
        mul_ln703_7_reg_5486 <= mul_ln703_7_fu_2814_p2;
        tmp_37_reg_5476 <= {{add_ln1192_11_fu_2776_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_4725 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        mul_ln1192_reg_4754 <= mul_ln1192_fu_1847_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_1788_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        or_ln25_reg_4744[6 : 1] <= or_ln25_fu_1828_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln25_reg_4725 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        r_V_1_reg_4764 <= fp_input_img_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        sext_ln1116_10_reg_5261 <= sext_ln1116_10_fu_2331_p1;
        sext_ln1116_11_reg_5281 <= sext_ln1116_11_fu_2343_p1;
        sext_ln1116_12_reg_5296 <= sext_ln1116_12_fu_2352_p1;
        sext_ln1116_13_reg_5301 <= sext_ln1116_13_fu_2355_p1;
        sext_ln1116_1_reg_5166 <= sext_ln1116_1_fu_2274_p1;
        sext_ln1116_2_reg_5176 <= sext_ln1116_2_fu_2280_p1;
        sext_ln1116_3_reg_5181 <= sext_ln1116_3_fu_2283_p1;
        sext_ln1116_4_reg_5201 <= sext_ln1116_4_fu_2295_p1;
        sext_ln1116_5_reg_5206 <= sext_ln1116_5_fu_2298_p1;
        sext_ln1116_6_reg_5211 <= sext_ln1116_6_fu_2301_p1;
        sext_ln1116_7_reg_5226 <= sext_ln1116_7_fu_2310_p1;
        sext_ln1116_8_reg_5246 <= sext_ln1116_8_fu_2322_p1;
        sext_ln1116_9_reg_5256 <= sext_ln1116_9_fu_2328_p1;
        sext_ln1116_reg_5161 <= sext_ln1116_fu_2271_p1;
        sext_ln1192_10_reg_5251 <= sext_ln1192_10_fu_2325_p1;
        sext_ln1192_11_reg_5266 <= sext_ln1192_11_fu_2334_p1;
        sext_ln1192_12_reg_5271 <= sext_ln1192_12_fu_2337_p1;
        sext_ln1192_13_reg_5276 <= sext_ln1192_13_fu_2340_p1;
        sext_ln1192_14_reg_5286 <= sext_ln1192_14_fu_2346_p1;
        sext_ln1192_15_reg_5291 <= sext_ln1192_15_fu_2349_p1;
        sext_ln1192_1_reg_5171 <= sext_ln1192_1_fu_2277_p1;
        sext_ln1192_2_reg_5186 <= sext_ln1192_2_fu_2286_p1;
        sext_ln1192_3_reg_5191 <= sext_ln1192_3_fu_2289_p1;
        sext_ln1192_4_reg_5196 <= sext_ln1192_4_fu_2292_p1;
        sext_ln1192_5_reg_5216 <= sext_ln1192_5_fu_2304_p1;
        sext_ln1192_6_reg_5221 <= sext_ln1192_6_fu_2307_p1;
        sext_ln1192_7_reg_5231 <= sext_ln1192_7_fu_2313_p1;
        sext_ln1192_8_reg_5236 <= sext_ln1192_8_fu_2316_p1;
        sext_ln1192_9_reg_5241 <= sext_ln1192_9_fu_2319_p1;
        sext_ln1192_reg_5156 <= sext_ln1192_fu_2268_p1;
        sext_ln708_reg_5151 <= sext_ln708_fu_2265_p1;
        temp_output_0_V_load_31_cast_reg_5306 <= temp_output_0_V_load_31_cast_fu_2359_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        sext_ln1116_14_reg_5867 <= sext_ln1116_14_fu_3748_p1;
        sext_ln1116_15_reg_5872 <= sext_ln1116_15_fu_3751_p1;
        sext_ln1116_16_reg_5877 <= sext_ln1116_16_fu_3754_p1;
        sext_ln1116_17_reg_5882 <= sext_ln1116_17_fu_3757_p1;
        sext_ln1116_18_reg_5887 <= sext_ln1116_18_fu_3760_p1;
        sext_ln1116_19_reg_5892 <= sext_ln1116_19_fu_3763_p1;
        sext_ln1116_20_reg_5897 <= sext_ln1116_20_fu_3766_p1;
        sext_ln1116_21_reg_5902 <= sext_ln1116_21_fu_3769_p1;
        sext_ln1116_22_reg_5907 <= sext_ln1116_22_fu_3772_p1;
        sext_ln1116_23_reg_5912 <= sext_ln1116_23_fu_3775_p1;
        sext_ln1116_24_reg_5917 <= sext_ln1116_24_fu_3778_p1;
        sext_ln1116_25_reg_5922 <= sext_ln1116_25_fu_3781_p1;
        sext_ln1116_26_reg_5927 <= sext_ln1116_26_fu_3784_p1;
        sext_ln1116_27_reg_5932 <= sext_ln1116_27_fu_3787_p1;
        sext_ln1116_28_reg_5937 <= sext_ln1116_28_fu_3790_p1;
        temp_output2_0_V_load_15_cast_reg_5942 <= temp_output2_0_V_load_15_cast_fu_3794_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_3414_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        temp_output2_0_V_addr_2_reg_5640 <= i_2_cast_fu_3420_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        temp_output2_0_V_load_10_reg_5827 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_11_reg_5832 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        temp_output2_0_V_load_12_reg_5847 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_13_reg_5852 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output2_0_V_load_1_reg_5732 <= temp_output2_0_V_q1;
        temp_output2_0_V_load_reg_5727 <= temp_output2_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_output2_0_V_load_2_reg_5747 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_3_reg_5752 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        temp_output2_0_V_load_4_reg_5767 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_5_reg_5772 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        temp_output2_0_V_load_6_reg_5787 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_7_reg_5792 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        temp_output2_0_V_load_8_reg_5807 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_9_reg_5812 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((j_2_reg_1426_pp5_iter2_reg == 2'd1) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1))) begin
        temp_output3_0_2_V_1_fu_410 <= {{add_ln1192_47_fu_4489_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~(j_2_reg_1426_pp5_iter2_reg == 2'd1) & ~(j_2_reg_1426_pp5_iter2_reg == 2'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1))) begin
        temp_output3_0_2_V_2_fu_414 <= {{add_ln1192_47_fu_4489_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_1936_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        temp_output_0_V_addr_1_reg_4783 <= i_1_cast_fu_1942_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_output_0_V_load_10_reg_4951 <= temp_output_0_V_q0;
        temp_output_0_V_load_11_reg_4956 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_output_0_V_load_12_reg_4971 <= temp_output_0_V_q0;
        temp_output_0_V_load_13_reg_4976 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_output_0_V_load_14_reg_4991 <= temp_output_0_V_q0;
        temp_output_0_V_load_15_reg_4996 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output_0_V_load_16_reg_5011 <= temp_output_0_V_q0;
        temp_output_0_V_load_17_reg_5016 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output_0_V_load_18_reg_5031 <= temp_output_0_V_q0;
        temp_output_0_V_load_19_reg_5036 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_output_0_V_load_1_reg_4856 <= temp_output_0_V_q1;
        temp_output_0_V_load_reg_4851 <= temp_output_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output_0_V_load_20_reg_5051 <= temp_output_0_V_q0;
        temp_output_0_V_load_21_reg_5056 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output_0_V_load_22_reg_5071 <= temp_output_0_V_q0;
        temp_output_0_V_load_23_reg_5076 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output_0_V_load_24_reg_5091 <= temp_output_0_V_q0;
        temp_output_0_V_load_25_reg_5096 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output_0_V_load_26_reg_5111 <= temp_output_0_V_q0;
        temp_output_0_V_load_27_reg_5116 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output_0_V_load_28_reg_5131 <= temp_output_0_V_q0;
        temp_output_0_V_load_29_reg_5136 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_output_0_V_load_2_reg_4871 <= temp_output_0_V_q0;
        temp_output_0_V_load_3_reg_4876 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        temp_output_0_V_load_4_reg_4891 <= temp_output_0_V_q0;
        temp_output_0_V_load_5_reg_4896 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        temp_output_0_V_load_6_reg_4911 <= temp_output_0_V_q0;
        temp_output_0_V_load_7_reg_4916 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_output_0_V_load_8_reg_4931 <= temp_output_0_V_q0;
        temp_output_0_V_load_9_reg_4936 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_1774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln21_1_reg_4720[5 : 0] <= zext_ln21_1_fu_1784_p1[5 : 0];
        zext_ln21_reg_4715[5 : 0] <= zext_ln21_fu_1780_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln5_fu_1486_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_1788_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln77_fu_1936_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln40_fu_2369_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state33 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state33 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln92_fu_3414_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state42 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state42 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln59_fu_3804_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state55 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state55 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (icmp_ln59_reg_5952 == 1'd0))) begin
        ap_phi_mux_j_2_phi_fu_1430_p4 = add_ln59_reg_5947;
    end else begin
        ap_phi_mux_j_2_phi_fu_1430_p4 = j_2_reg_1426;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fp_input_img_V_address0 = zext_ln23_fu_1834_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fp_input_img_V_address0 = i_cast_reg_4650_pp0_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fp_input_img_V_address0 = 64'd0;
    end else begin
        fp_input_img_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        fp_input_img_V_ce0 = 1'b1;
    end else begin
        fp_input_img_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fp_input_img_V_ce1 = 1'b1;
    end else begin
        fp_input_img_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fp_input_img_V_d0 = select_ln571_4_fu_1759_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fp_input_img_V_d0 = 32'd256;
    end else begin
        fp_input_img_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln5_reg_4646_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        fp_input_img_V_we0 = 1'b1;
    end else begin
        fp_input_img_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        grp_fu_1475_p0 = bitcast_ln734_1_fu_3706_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        grp_fu_1475_p0 = bitcast_ln734_fu_2228_p1;
    end else begin
        grp_fu_1475_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_img_ce0 = 1'b1;
    end else begin
        input_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_0_ce0 = 1'b1;
    end else begin
        layer2_weights_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_10_ce0 = 1'b1;
    end else begin
        layer2_weights_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_11_ce0 = 1'b1;
    end else begin
        layer2_weights_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_12_ce0 = 1'b1;
    end else begin
        layer2_weights_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_13_ce0 = 1'b1;
    end else begin
        layer2_weights_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_14_ce0 = 1'b1;
    end else begin
        layer2_weights_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_15_ce0 = 1'b1;
    end else begin
        layer2_weights_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_16_ce0 = 1'b1;
    end else begin
        layer2_weights_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_17_ce0 = 1'b1;
    end else begin
        layer2_weights_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_18_ce0 = 1'b1;
    end else begin
        layer2_weights_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_19_ce0 = 1'b1;
    end else begin
        layer2_weights_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_1_ce0 = 1'b1;
    end else begin
        layer2_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_20_ce0 = 1'b1;
    end else begin
        layer2_weights_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_21_ce0 = 1'b1;
    end else begin
        layer2_weights_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_22_ce0 = 1'b1;
    end else begin
        layer2_weights_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_23_ce0 = 1'b1;
    end else begin
        layer2_weights_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_24_ce0 = 1'b1;
    end else begin
        layer2_weights_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_25_ce0 = 1'b1;
    end else begin
        layer2_weights_V_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_26_ce0 = 1'b1;
    end else begin
        layer2_weights_V_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_27_ce0 = 1'b1;
    end else begin
        layer2_weights_V_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_28_ce0 = 1'b1;
    end else begin
        layer2_weights_V_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_29_ce0 = 1'b1;
    end else begin
        layer2_weights_V_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_2_ce0 = 1'b1;
    end else begin
        layer2_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_30_ce0 = 1'b1;
    end else begin
        layer2_weights_V_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter6 == 1'b1))) begin
        layer2_weights_V_31_ce0 = 1'b1;
    end else begin
        layer2_weights_V_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_3_ce0 = 1'b1;
    end else begin
        layer2_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_4_ce0 = 1'b1;
    end else begin
        layer2_weights_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_5_ce0 = 1'b1;
    end else begin
        layer2_weights_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_6_ce0 = 1'b1;
    end else begin
        layer2_weights_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_7_ce0 = 1'b1;
    end else begin
        layer2_weights_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_8_ce0 = 1'b1;
    end else begin
        layer2_weights_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_9_ce0 = 1'b1;
    end else begin
        layer2_weights_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        temp_output2_0_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        temp_output2_0_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        temp_output2_0_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        temp_output2_0_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        temp_output2_0_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_output2_0_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output2_0_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output2_0_V_address0 = temp_output2_0_V_addr_reg_4701;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        temp_output2_0_V_address0 = temp_output2_0_V_addr_2_reg_5640_pp4_iter2_reg;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter7 == 1'b1))) begin
        temp_output2_0_V_address0 = j_1_cast_reg_5320_pp3_iter6_reg;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output2_0_V_address0 = 64'd0;
    end else begin
        temp_output2_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        temp_output2_0_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        temp_output2_0_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        temp_output2_0_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        temp_output2_0_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        temp_output2_0_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_output2_0_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output2_0_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output2_0_V_address1 = 64'd1;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        temp_output2_0_V_address1 = i_2_cast_fu_3420_p1;
    end else begin
        temp_output2_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter3 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1)))) begin
        temp_output2_0_V_ce0 = 1'b1;
    end else begin
        temp_output2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        temp_output2_0_V_ce1 = 1'b1;
    end else begin
        temp_output2_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        temp_output2_0_V_d0 = 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter7 == 1'b1))) begin
        temp_output2_0_V_d0 = {{add_ln1192_30_fu_3391_p2[39:8]}};
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output2_0_V_d0 = 32'd256;
    end else begin
        temp_output2_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln885_1_reg_5646_pp4_iter2_reg == 1'd0) & (1'd1 == and_ln1506_1_fu_3737_p2) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter3 == 1'b1)) | ((icmp_ln40_reg_5316_pp3_iter6_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1)))) begin
        temp_output2_0_V_we0 = 1'b1;
    end else begin
        temp_output2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output_0_V_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output_0_V_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output_0_V_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output_0_V_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output_0_V_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output_0_V_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output_0_V_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_output_0_V_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_output_0_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_output_0_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_output_0_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        temp_output_0_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        temp_output_0_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_output_0_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_output_0_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_output_0_V_address0 = temp_output_0_V_addr_reg_4696;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        temp_output_0_V_address0 = temp_output_0_V_addr_1_reg_4783_pp2_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_output_0_V_address0 = zext_ln21_reg_4715;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_V_address0 = 64'd0;
    end else begin
        temp_output_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output_0_V_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output_0_V_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output_0_V_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output_0_V_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output_0_V_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output_0_V_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output_0_V_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_output_0_V_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_output_0_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_output_0_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_output_0_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        temp_output_0_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        temp_output_0_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_output_0_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_output_0_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_output_0_V_address1 = 64'd1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        temp_output_0_V_address1 = i_1_cast_fu_1942_p1;
    end else begin
        temp_output_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter3 == 1'b1)))) begin
        temp_output_0_V_ce0 = 1'b1;
    end else begin
        temp_output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        temp_output_0_V_ce1 = 1'b1;
    end else begin
        temp_output_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        temp_output_0_V_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_output_0_V_d0 = sum_V_2_reg_1380;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_V_d0 = 32'd256;
    end else begin
        temp_output_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | ((icmp_ln885_reg_4789_pp2_iter2_reg == 1'd0) & (1'd1 == and_ln1506_fu_2259_p2) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter3 == 1'b1)))) begin
        temp_output_0_V_we0 = 1'b1;
    end else begin
        temp_output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weights_layer1_weights_V_ce0 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weights_layer1_weights_V_ce1 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln5_fu_1486_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln5_fu_1486_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln21_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln77_fu_1936_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((icmp_ln77_fu_1936_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln40_fu_2369_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter7 == 1'b1) & (ap_enable_reg_pp3_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((icmp_ln40_fu_2369_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter7 == 1'b1) & (ap_enable_reg_pp3_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((icmp_ln92_fu_3414_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter3 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((icmp_ln92_fu_3414_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter3 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln59_fu_3804_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter3 == 1'b1) & (ap_enable_reg_pp5_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter3 == 1'b1) & (ap_enable_reg_pp5_iter2 == 1'b0)) | ((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln59_fu_3804_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (icmp_ln109_fu_4526_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_1542_p2 = (12'd1075 - zext_ln455_fu_1528_p1);

assign add_ln109_fu_4520_p2 = (i_3_reg_1438 + 2'd1);

assign add_ln1118_fu_1860_p2 = (tmp_23_fu_1853_p3 + zext_ln21_1_reg_4720);

assign add_ln1192_10_fu_2743_p2 = (shl_ln728_s_fu_2735_p3 + mul_ln703_5_fu_2720_p2);

assign add_ln1192_11_fu_2776_p2 = (shl_ln728_10_fu_2768_p3 + mul_ln703_6_fu_2753_p2);

assign add_ln1192_12_fu_2826_p2 = (shl_ln728_11_fu_2819_p3 + mul_ln1192_7_reg_5471);

assign add_ln1192_13_fu_2849_p2 = (shl_ln728_12_fu_2841_p3 + mul_ln1192_8_reg_5481);

assign add_ln1192_14_fu_2872_p2 = (shl_ln728_13_fu_2864_p3 + mul_ln703_7_reg_5486);

assign add_ln1192_15_fu_2904_p2 = (shl_ln728_14_fu_2896_p3 + mul_ln1192_9_fu_2881_p2);

assign add_ln1192_16_fu_2937_p2 = (shl_ln728_15_fu_2929_p3 + mul_ln1192_10_fu_2914_p2);

assign add_ln1192_17_fu_2987_p2 = (shl_ln728_16_fu_2980_p3 + mul_ln1192_11_reg_5516);

assign add_ln1192_18_fu_3010_p2 = (shl_ln728_17_fu_3002_p3 + mul_ln703_8_reg_5526);

assign add_ln1192_19_fu_3033_p2 = (shl_ln728_18_fu_3025_p3 + mul_ln1192_12_reg_5531);

assign add_ln1192_1_fu_2454_p2 = (shl_ln728_1_fu_2446_p3 + mul_ln703_fu_2431_p2);

assign add_ln1192_20_fu_3065_p2 = (shl_ln728_19_fu_3057_p3 + mul_ln703_9_fu_3042_p2);

assign add_ln1192_21_fu_3098_p2 = (shl_ln728_20_fu_3090_p3 + mul_ln703_10_fu_3075_p2);

assign add_ln1192_22_fu_3148_p2 = (shl_ln728_21_fu_3141_p3 + mul_ln1192_13_reg_5561);

assign add_ln1192_23_fu_3171_p2 = (shl_ln728_22_fu_3163_p3 + mul_ln1192_14_reg_5571);

assign add_ln1192_24_fu_3194_p2 = (shl_ln728_23_fu_3186_p3 + mul_ln1192_15_reg_5576);

assign add_ln1192_25_fu_3226_p2 = (shl_ln728_24_fu_3218_p3 + mul_ln703_11_fu_3203_p2);

assign add_ln1192_26_fu_3259_p2 = (shl_ln728_25_fu_3251_p3 + mul_ln1192_16_fu_3236_p2);

assign add_ln1192_27_fu_3303_p2 = ($signed(shl_ln728_26_fu_3293_p3) + $signed(sext_ln1192_36_fu_3300_p1));

assign add_ln1192_28_fu_3327_p2 = (shl_ln728_27_fu_3319_p3 + mul_ln703_12_reg_5616);

assign add_ln1192_29_fu_3358_p2 = (shl_ln728_28_fu_3350_p3 + mul_ln703_13_fu_3335_p2);

assign add_ln1192_2_fu_2504_p2 = (shl_ln728_2_fu_2497_p3 + mul_ln703_1_reg_5381);

assign add_ln1192_30_fu_3391_p2 = (shl_ln728_29_fu_3383_p3 + mul_ln703_14_fu_3368_p2);

assign add_ln1192_33_fu_3870_p2 = (shl_ln728_30_fu_3862_p3 + mul_ln1118_1_fu_3847_p2);

assign add_ln1192_34_fu_3915_p2 = (shl_ln728_31_fu_3907_p3 + mul_ln1118_2_fu_3892_p2);

assign add_ln1192_35_fu_4001_p2 = (shl_ln728_32_fu_3994_p3 + mul_ln1118_3_reg_5956);

assign add_ln1192_36_fu_4024_p2 = (shl_ln728_33_fu_4016_p3 + mul_ln1118_4_reg_5966);

assign add_ln1192_37_fu_4047_p2 = (shl_ln728_34_fu_4039_p3 + mul_ln1118_5_reg_5971);

assign add_ln1192_38_fu_4091_p2 = (shl_ln728_35_fu_4083_p3 + mul_ln1118_6_fu_4068_p2);

assign add_ln1192_39_fu_4136_p2 = (shl_ln728_36_fu_4128_p3 + mul_ln1118_7_fu_4113_p2);

assign add_ln1192_3_fu_2527_p2 = (shl_ln728_3_fu_2519_p3 + mul_ln1192_3_reg_5391);

assign add_ln1192_40_fu_4222_p2 = (shl_ln728_37_fu_4215_p3 + mul_ln1118_8_reg_5976);

assign add_ln1192_41_fu_4245_p2 = (shl_ln728_38_fu_4237_p3 + mul_ln1118_9_reg_5986);

assign add_ln1192_42_fu_4268_p2 = (shl_ln728_39_fu_4260_p3 + mul_ln1118_10_reg_5991);

assign add_ln1192_43_fu_4312_p2 = (shl_ln728_40_fu_4304_p3 + mul_ln1118_11_fu_4289_p2);

assign add_ln1192_44_fu_4357_p2 = (shl_ln728_41_fu_4349_p3 + mul_ln1118_12_fu_4334_p2);

assign add_ln1192_45_fu_4413_p2 = (shl_ln728_42_fu_4406_p3 + mul_ln1118_13_reg_5996);

assign add_ln1192_46_fu_4444_p2 = (shl_ln728_43_fu_4436_p3 + mul_ln1118_14_fu_4421_p2);

assign add_ln1192_47_fu_4489_p2 = (shl_ln728_44_fu_4481_p3 + mul_ln1118_15_fu_4466_p2);

assign add_ln1192_4_fu_2550_p2 = (shl_ln728_4_fu_2542_p3 + mul_ln703_2_reg_5396);

assign add_ln1192_5_fu_2582_p2 = (shl_ln728_5_fu_2574_p3 + mul_ln703_3_fu_2559_p2);

assign add_ln1192_6_fu_2615_p2 = (shl_ln728_6_fu_2607_p3 + mul_ln1192_4_fu_2592_p2);

assign add_ln1192_7_fu_2665_p2 = (shl_ln728_7_fu_2658_p3 + mul_ln1192_5_reg_5426);

assign add_ln1192_8_fu_2688_p2 = (shl_ln728_8_fu_2680_p3 + mul_ln1192_6_reg_5436);

assign add_ln1192_9_fu_2711_p2 = (shl_ln728_9_fu_2703_p3 + mul_ln703_4_reg_5441);

assign add_ln1192_fu_2421_p2 = (shl_ln_fu_2413_p3 + mul_ln1192_2_fu_2398_p2);

assign add_ln21_fu_1768_p2 = (j_reg_1357 + 6'd1);

assign add_ln25_fu_1794_p2 = (k_reg_1369 + 7'd2);

assign add_ln40_fu_2363_p2 = (j_1_reg_1404 + 5'd1);

assign add_ln581_fu_1577_p2 = ($signed(F2_reg_4688) + $signed(12'd4088));

assign add_ln59_fu_3798_p2 = (ap_phi_mux_j_2_phi_fu_1430_p4 + 2'd1);

assign add_ln5_fu_1480_p2 = (i_reg_1346 + 7'd1);

assign add_ln77_fu_1930_p2 = (i_1_reg_1393 + 6'd1);

assign add_ln908_1_fu_3579_p2 = ($signed(sub_ln894_1_fu_3471_p2) + $signed(32'd4294967242));

assign add_ln908_fu_2101_p2 = ($signed(sub_ln894_fu_1993_p2) + $signed(32'd4294967242));

assign add_ln915_1_fu_3681_p2 = (sub_ln915_1_fu_3676_p2 + select_ln893_1_fu_3668_p3);

assign add_ln915_fu_2203_p2 = (sub_ln915_fu_2198_p2 + select_ln893_fu_2190_p3);

assign add_ln92_fu_3408_p2 = (i_2_reg_1415 + 5'd1);

assign and_ln1506_1_fu_3737_p2 = (or_ln1506_1_fu_3733_p2 & grp_fu_1475_p2);

assign and_ln1506_fu_2259_p2 = (or_ln1506_fu_2255_p2 & grp_fu_1475_p2);

assign and_ln581_fu_1681_p2 = (xor_ln582_fu_1675_p2 & icmp_ln581_fu_1572_p2);

assign and_ln582_fu_1664_p2 = (xor_ln571_fu_1659_p2 & icmp_ln582_fu_1599_p2);

assign and_ln585_fu_1693_p2 = (icmp_ln585_fu_1687_p2 & and_ln581_fu_1681_p2);

assign and_ln603_fu_1711_p2 = (xor_ln581_fu_1705_p2 & icmp_ln603_fu_1618_p2);

assign and_ln899_1_fu_2107_p2 = (xor_ln899_fu_2073_p2 & p_Result_12_fu_2079_p3);

assign and_ln899_2_fu_3531_p2 = (tmp_V_5_fu_3445_p3 & or_ln899_fu_3525_p2);

assign and_ln899_3_fu_3585_p2 = (xor_ln899_1_fu_3551_p2 & p_Result_16_fu_3557_p3);

assign and_ln899_fu_2053_p2 = (tmp_V_4_fu_1967_p3 & or_ln899_2_fu_2047_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp5_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_return = $signed(ret_V_5_fu_4629_p3);

assign ashr_ln586_fu_1628_p2 = $signed(man_V_2_fu_1565_p3) >>> zext_ln586_fu_1624_p1;

assign bitcast_ln734_1_fu_3706_p1 = p_Result_17_fu_3694_p5;

assign bitcast_ln734_fu_2228_p1 = p_Result_13_fu_2216_p5;

assign exp_tmp_fu_1518_p4 = {{ireg_fu_1502_p1[62:52]}};

assign fp_input_img_V_address1 = k_cast75_fu_1800_p1;

assign grp_fu_1472_p0 = input_img_q0;

assign i_1_cast_fu_1942_p1 = i_1_reg_1393;

assign i_2_cast_fu_3420_p1 = i_2_reg_1415;

assign i_cast_fu_1492_p1 = i_reg_1346;

assign icmp_ln109_fu_4526_p2 = ((i_3_reg_1438 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_4553_p2 = (($signed(tmp_19_fu_4541_p5) > $signed(max_val_V_reg_1461)) ? 1'b1 : 1'b0);

assign icmp_ln1506_1_fu_2249_p2 = ((trunc_ln6_fu_2233_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1506_2_fu_3721_p2 = ((add_ln915_1_fu_3681_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln1506_3_fu_3727_p2 = ((trunc_ln1506_1_fu_3711_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1506_fu_2243_p2 = ((add_ln915_fu_2203_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_1774_p2 = ((j_reg_1357 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_1788_p2 = ((k_reg_1369 < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_2369_p2 = ((j_1_reg_1404 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_1536_p2 = ((trunc_ln555_fu_1506_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_1572_p2 = (($signed(F2_reg_4688) > $signed(12'd8)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_1599_p2 = ((F2_reg_4688 == 12'd8) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_1687_p2 = ((sh_amt_fu_1587_p3 > 12'd53) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_3804_p2 = ((ap_phi_mux_j_2_phi_fu_1430_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_1486_p2 = ((i_reg_1346 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_1618_p2 = ((tmp_21_fu_1608_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_1936_p2 = ((i_1_reg_1393 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_4609_p2 = ((trunc_ln851_fu_4605_p1 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln885_1_fu_3425_p2 = ((temp_output2_0_V_q1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln885_fu_1947_p2 = ((temp_output_0_V_q1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln896_1_fu_3493_p2 = (($signed(tmp_78_fu_3483_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln896_fu_2015_p2 = (($signed(tmp_74_fu_2005_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln899_1_fu_3537_p2 = ((and_ln899_2_fu_3531_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_2059_p2 = ((and_ln899_fu_2053_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln908_1_fu_3565_p2 = (($signed(lsb_index_1_fu_3477_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln908_fu_2087_p2 = (($signed(lsb_index_fu_1999_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_3414_p2 = ((i_2_reg_1415 == 5'd16) ? 1'b1 : 1'b0);

assign input_img_address0 = i_cast_fu_1492_p1;

assign ireg_fu_1502_p1 = grp_fu_1472_p1;

assign j_1_cast_fu_2375_p1 = j_1_reg_1404;

assign k_cast75_fu_1800_p1 = k_reg_1369;


always @ (p_Result_15_fu_3453_p4) begin
    if (p_Result_15_fu_3453_p4[0] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd0;
    end else if (p_Result_15_fu_3453_p4[1] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd1;
    end else if (p_Result_15_fu_3453_p4[2] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd2;
    end else if (p_Result_15_fu_3453_p4[3] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd3;
    end else if (p_Result_15_fu_3453_p4[4] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd4;
    end else if (p_Result_15_fu_3453_p4[5] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd5;
    end else if (p_Result_15_fu_3453_p4[6] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd6;
    end else if (p_Result_15_fu_3453_p4[7] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd7;
    end else if (p_Result_15_fu_3453_p4[8] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd8;
    end else if (p_Result_15_fu_3453_p4[9] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd9;
    end else if (p_Result_15_fu_3453_p4[10] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd10;
    end else if (p_Result_15_fu_3453_p4[11] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd11;
    end else if (p_Result_15_fu_3453_p4[12] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd12;
    end else if (p_Result_15_fu_3453_p4[13] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd13;
    end else if (p_Result_15_fu_3453_p4[14] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd14;
    end else if (p_Result_15_fu_3453_p4[15] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd15;
    end else if (p_Result_15_fu_3453_p4[16] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd16;
    end else if (p_Result_15_fu_3453_p4[17] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd17;
    end else if (p_Result_15_fu_3453_p4[18] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd18;
    end else if (p_Result_15_fu_3453_p4[19] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd19;
    end else if (p_Result_15_fu_3453_p4[20] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd20;
    end else if (p_Result_15_fu_3453_p4[21] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd21;
    end else if (p_Result_15_fu_3453_p4[22] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd22;
    end else if (p_Result_15_fu_3453_p4[23] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd23;
    end else if (p_Result_15_fu_3453_p4[24] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd24;
    end else if (p_Result_15_fu_3453_p4[25] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd25;
    end else if (p_Result_15_fu_3453_p4[26] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd26;
    end else if (p_Result_15_fu_3453_p4[27] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd27;
    end else if (p_Result_15_fu_3453_p4[28] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd28;
    end else if (p_Result_15_fu_3453_p4[29] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd29;
    end else if (p_Result_15_fu_3453_p4[30] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd30;
    end else if (p_Result_15_fu_3453_p4[31] == 1'b1) begin
        l_1_fu_3463_p3 = 32'd31;
    end else begin
        l_1_fu_3463_p3 = 32'd32;
    end
end


always @ (p_Result_11_fu_1975_p4) begin
    if (p_Result_11_fu_1975_p4[0] == 1'b1) begin
        l_fu_1985_p3 = 32'd0;
    end else if (p_Result_11_fu_1975_p4[1] == 1'b1) begin
        l_fu_1985_p3 = 32'd1;
    end else if (p_Result_11_fu_1975_p4[2] == 1'b1) begin
        l_fu_1985_p3 = 32'd2;
    end else if (p_Result_11_fu_1975_p4[3] == 1'b1) begin
        l_fu_1985_p3 = 32'd3;
    end else if (p_Result_11_fu_1975_p4[4] == 1'b1) begin
        l_fu_1985_p3 = 32'd4;
    end else if (p_Result_11_fu_1975_p4[5] == 1'b1) begin
        l_fu_1985_p3 = 32'd5;
    end else if (p_Result_11_fu_1975_p4[6] == 1'b1) begin
        l_fu_1985_p3 = 32'd6;
    end else if (p_Result_11_fu_1975_p4[7] == 1'b1) begin
        l_fu_1985_p3 = 32'd7;
    end else if (p_Result_11_fu_1975_p4[8] == 1'b1) begin
        l_fu_1985_p3 = 32'd8;
    end else if (p_Result_11_fu_1975_p4[9] == 1'b1) begin
        l_fu_1985_p3 = 32'd9;
    end else if (p_Result_11_fu_1975_p4[10] == 1'b1) begin
        l_fu_1985_p3 = 32'd10;
    end else if (p_Result_11_fu_1975_p4[11] == 1'b1) begin
        l_fu_1985_p3 = 32'd11;
    end else if (p_Result_11_fu_1975_p4[12] == 1'b1) begin
        l_fu_1985_p3 = 32'd12;
    end else if (p_Result_11_fu_1975_p4[13] == 1'b1) begin
        l_fu_1985_p3 = 32'd13;
    end else if (p_Result_11_fu_1975_p4[14] == 1'b1) begin
        l_fu_1985_p3 = 32'd14;
    end else if (p_Result_11_fu_1975_p4[15] == 1'b1) begin
        l_fu_1985_p3 = 32'd15;
    end else if (p_Result_11_fu_1975_p4[16] == 1'b1) begin
        l_fu_1985_p3 = 32'd16;
    end else if (p_Result_11_fu_1975_p4[17] == 1'b1) begin
        l_fu_1985_p3 = 32'd17;
    end else if (p_Result_11_fu_1975_p4[18] == 1'b1) begin
        l_fu_1985_p3 = 32'd18;
    end else if (p_Result_11_fu_1975_p4[19] == 1'b1) begin
        l_fu_1985_p3 = 32'd19;
    end else if (p_Result_11_fu_1975_p4[20] == 1'b1) begin
        l_fu_1985_p3 = 32'd20;
    end else if (p_Result_11_fu_1975_p4[21] == 1'b1) begin
        l_fu_1985_p3 = 32'd21;
    end else if (p_Result_11_fu_1975_p4[22] == 1'b1) begin
        l_fu_1985_p3 = 32'd22;
    end else if (p_Result_11_fu_1975_p4[23] == 1'b1) begin
        l_fu_1985_p3 = 32'd23;
    end else if (p_Result_11_fu_1975_p4[24] == 1'b1) begin
        l_fu_1985_p3 = 32'd24;
    end else if (p_Result_11_fu_1975_p4[25] == 1'b1) begin
        l_fu_1985_p3 = 32'd25;
    end else if (p_Result_11_fu_1975_p4[26] == 1'b1) begin
        l_fu_1985_p3 = 32'd26;
    end else if (p_Result_11_fu_1975_p4[27] == 1'b1) begin
        l_fu_1985_p3 = 32'd27;
    end else if (p_Result_11_fu_1975_p4[28] == 1'b1) begin
        l_fu_1985_p3 = 32'd28;
    end else if (p_Result_11_fu_1975_p4[29] == 1'b1) begin
        l_fu_1985_p3 = 32'd29;
    end else if (p_Result_11_fu_1975_p4[30] == 1'b1) begin
        l_fu_1985_p3 = 32'd30;
    end else if (p_Result_11_fu_1975_p4[31] == 1'b1) begin
        l_fu_1985_p3 = 32'd31;
    end else begin
        l_fu_1985_p3 = 32'd32;
    end
end

assign layer2_weights_V_0_address0 = j_1_cast_fu_2375_p1;

assign layer2_weights_V_10_address0 = j_1_cast_reg_5320;

assign layer2_weights_V_11_address0 = j_1_cast_reg_5320_pp3_iter1_reg;

assign layer2_weights_V_12_address0 = j_1_cast_reg_5320_pp3_iter1_reg;

assign layer2_weights_V_13_address0 = j_1_cast_reg_5320_pp3_iter1_reg;

assign layer2_weights_V_14_address0 = j_1_cast_reg_5320_pp3_iter1_reg;

assign layer2_weights_V_15_address0 = j_1_cast_reg_5320_pp3_iter1_reg;

assign layer2_weights_V_16_address0 = j_1_cast_reg_5320_pp3_iter2_reg;

assign layer2_weights_V_17_address0 = j_1_cast_reg_5320_pp3_iter2_reg;

assign layer2_weights_V_18_address0 = j_1_cast_reg_5320_pp3_iter2_reg;

assign layer2_weights_V_19_address0 = j_1_cast_reg_5320_pp3_iter2_reg;

assign layer2_weights_V_1_address0 = j_1_cast_fu_2375_p1;

assign layer2_weights_V_20_address0 = j_1_cast_reg_5320_pp3_iter2_reg;

assign layer2_weights_V_21_address0 = j_1_cast_reg_5320_pp3_iter3_reg;

assign layer2_weights_V_22_address0 = j_1_cast_reg_5320_pp3_iter3_reg;

assign layer2_weights_V_23_address0 = j_1_cast_reg_5320_pp3_iter3_reg;

assign layer2_weights_V_24_address0 = j_1_cast_reg_5320_pp3_iter3_reg;

assign layer2_weights_V_25_address0 = j_1_cast_reg_5320_pp3_iter3_reg;

assign layer2_weights_V_26_address0 = j_1_cast_reg_5320_pp3_iter4_reg;

assign layer2_weights_V_27_address0 = j_1_cast_reg_5320_pp3_iter4_reg;

assign layer2_weights_V_28_address0 = j_1_cast_reg_5320_pp3_iter4_reg;

assign layer2_weights_V_29_address0 = j_1_cast_reg_5320_pp3_iter4_reg;

assign layer2_weights_V_2_address0 = j_1_cast_fu_2375_p1;

assign layer2_weights_V_30_address0 = j_1_cast_reg_5320_pp3_iter4_reg;

assign layer2_weights_V_31_address0 = j_1_cast_reg_5320_pp3_iter5_reg;

assign layer2_weights_V_3_address0 = j_1_cast_fu_2375_p1;

assign layer2_weights_V_4_address0 = j_1_cast_fu_2375_p1;

assign layer2_weights_V_5_address0 = j_1_cast_fu_2375_p1;

assign layer2_weights_V_6_address0 = j_1_cast_reg_5320;

assign layer2_weights_V_7_address0 = j_1_cast_reg_5320;

assign layer2_weights_V_8_address0 = j_1_cast_reg_5320;

assign layer2_weights_V_9_address0 = j_1_cast_reg_5320;

assign lhs_1_fu_1870_p3 = {{sum_V_2_reg_1380}, {8'd0}};

assign lhs_2_fu_1906_p3 = {{tmp_24_fu_1896_p4}, {8'd0}};

assign lsb_index_1_fu_3477_p2 = ($signed(sub_ln894_1_fu_3471_p2) + $signed(32'd4294967243));

assign lsb_index_fu_1999_p2 = ($signed(sub_ln894_fu_1993_p2) + $signed(32'd4294967243));

assign lshr_ln897_1_fu_3513_p2 = 32'd4294967295 >> zext_ln897_1_fu_3509_p1;

assign lshr_ln897_fu_2035_p2 = 32'd4294967295 >> zext_ln897_fu_2031_p1;

assign lshr_ln908_1_fu_3615_p2 = zext_ln907_1_fu_3609_p1 >> zext_ln908_1_fu_3612_p1;

assign lshr_ln908_fu_2137_p2 = zext_ln907_fu_2131_p1 >> zext_ln908_fu_2134_p1;

assign m_2_fu_2152_p3 = ((icmp_ln908_reg_4803[0:0] == 1'b1) ? lshr_ln908_fu_2137_p2 : shl_ln909_fu_2146_p2);

assign m_3_fu_2162_p2 = (m_2_fu_2152_p3 + zext_ln911_fu_2159_p1);

assign m_4_fu_3630_p3 = ((icmp_ln908_1_reg_5660[0:0] == 1'b1) ? lshr_ln908_1_fu_3615_p2 : shl_ln909_1_fu_3624_p2);

assign m_5_fu_3640_p2 = (m_4_fu_3630_p3 + zext_ln911_1_fu_3637_p1);

assign m_8_fu_2168_p4 = {{m_3_fu_2162_p2[63:1]}};

assign m_fu_3646_p4 = {{m_5_fu_3640_p2[63:1]}};

assign man_V_1_fu_1559_p2 = (54'd0 - zext_ln569_fu_1555_p1);

assign man_V_2_fu_1565_p3 = ((p_Result_8_reg_4670[0:0] == 1'b1) ? man_V_1_fu_1559_p2 : zext_ln569_fu_1555_p1);

assign max_idx_V_1_fu_4579_p3 = ((icmp_ln1494_fu_4553_p2[0:0] == 1'b1) ? zext_ln111_fu_4575_p1 : max_idx_V_reg_1449);

assign max_val_V_1_fu_4559_p3 = ((icmp_ln1494_fu_4553_p2[0:0] == 1'b1) ? tmp_19_fu_4541_p5 : max_val_V_reg_1461);

assign mul_ln1118_10_fu_4210_p1 = sext_ln1116_24_reg_5917;

assign mul_ln1118_11_fu_4289_p1 = sext_ln1116_25_reg_5922;

assign mul_ln1118_12_fu_4334_p1 = sext_ln1116_26_reg_5927;

assign mul_ln1118_13_fu_4379_p1 = sext_ln1116_27_reg_5932;

assign mul_ln1118_14_fu_4421_p1 = sext_ln1116_28_reg_5937;

assign mul_ln1118_15_fu_4466_p1 = temp_output2_0_V_load_15_cast_reg_5942;

assign mul_ln1118_1_fu_3847_p1 = sext_ln1116_15_reg_5872;

assign mul_ln1118_2_fu_3892_p1 = sext_ln1116_16_reg_5877;

assign mul_ln1118_3_fu_3937_p1 = sext_ln1116_17_reg_5882;

assign mul_ln1118_4_fu_3968_p1 = sext_ln1116_18_reg_5887;

assign mul_ln1118_5_fu_3989_p1 = sext_ln1116_19_reg_5892;

assign mul_ln1118_6_fu_4068_p1 = sext_ln1116_20_reg_5897;

assign mul_ln1118_7_fu_4113_p1 = sext_ln1116_21_reg_5902;

assign mul_ln1118_8_fu_4158_p1 = sext_ln1116_22_reg_5907;

assign mul_ln1118_9_fu_4189_p1 = sext_ln1116_23_reg_5912;

assign mul_ln1118_fu_3826_p1 = sext_ln1116_14_reg_5867;

assign mul_ln1192_10_fu_2914_p1 = sext_ln1192_8_reg_5236;

assign mul_ln1192_11_fu_2947_p1 = sext_ln1192_9_reg_5241;

assign mul_ln1192_12_fu_2975_p1 = sext_ln1192_10_reg_5251;

assign mul_ln1192_13_fu_3108_p1 = sext_ln1192_11_reg_5266;

assign mul_ln1192_14_fu_3127_p1 = sext_ln1192_12_reg_5271;

assign mul_ln1192_15_fu_3136_p1 = sext_ln1192_13_reg_5276;

assign mul_ln1192_16_fu_3236_p1 = sext_ln1192_14_reg_5286;

assign mul_ln1192_17_fu_3269_p1 = sext_ln1192_15_reg_5291;

assign mul_ln1192_2_fu_2398_p1 = sext_ln1192_reg_5156;

assign mul_ln1192_3_fu_2483_p1 = sext_ln1192_1_reg_5171;

assign mul_ln1192_4_fu_2592_p1 = sext_ln1192_2_reg_5186;

assign mul_ln1192_5_fu_2625_p1 = sext_ln1192_3_reg_5191;

assign mul_ln1192_6_fu_2644_p1 = sext_ln1192_4_reg_5196;

assign mul_ln1192_7_fu_2786_p1 = sext_ln1192_5_reg_5216;

assign mul_ln1192_8_fu_2805_p1 = sext_ln1192_6_reg_5221;

assign mul_ln1192_9_fu_2881_p1 = sext_ln1192_7_reg_5231;

assign mul_ln703_10_fu_3075_p1 = sext_ln1116_10_reg_5261;

assign mul_ln703_11_fu_3203_p1 = sext_ln1116_11_reg_5281;

assign mul_ln703_12_fu_3288_p1 = sext_ln1116_12_reg_5296;

assign mul_ln703_13_fu_3335_p1 = sext_ln1116_13_reg_5301;

assign mul_ln703_14_fu_3368_p1 = temp_output_0_V_load_31_cast_reg_5306;

assign mul_ln703_1_fu_2464_p1 = sext_ln1116_1_reg_5166;

assign mul_ln703_2_fu_2492_p1 = sext_ln1116_2_reg_5176;

assign mul_ln703_3_fu_2559_p1 = sext_ln1116_3_reg_5181;

assign mul_ln703_4_fu_2653_p1 = sext_ln1116_4_reg_5201;

assign mul_ln703_5_fu_2720_p1 = sext_ln1116_5_reg_5206;

assign mul_ln703_6_fu_2753_p1 = sext_ln1116_6_reg_5211;

assign mul_ln703_7_fu_2814_p1 = sext_ln1116_7_reg_5226;

assign mul_ln703_8_fu_2966_p1 = sext_ln1116_8_reg_5246;

assign mul_ln703_9_fu_3042_p1 = sext_ln1116_9_reg_5256;

assign mul_ln703_fu_2431_p1 = sext_ln1116_reg_5161;

assign mul_ln708_fu_2389_p1 = sext_ln708_reg_5151;

assign or_ln1506_1_fu_3733_p2 = (icmp_ln1506_3_reg_5695 | icmp_ln1506_2_reg_5690);

assign or_ln1506_fu_2255_p2 = (icmp_ln1506_reg_4833 | icmp_ln1506_1_reg_4838);

assign or_ln25_fu_1828_p2 = (k_reg_1369 | 7'd1);

assign or_ln571_1_fu_1753_p2 = (or_ln571_fu_1724_p2 | and_ln581_fu_1681_p2);

assign or_ln571_fu_1724_p2 = (icmp_ln571_reg_4680 | and_ln603_fu_1711_p2);

assign or_ln581_fu_1699_p2 = (or_ln582_fu_1670_p2 | icmp_ln581_fu_1572_p2);

assign or_ln582_fu_1670_p2 = (icmp_ln582_fu_1599_p2 | icmp_ln571_reg_4680);

assign or_ln899_2_fu_2047_p2 = (shl_ln899_fu_2041_p2 | lshr_ln897_fu_2035_p2);

assign or_ln899_fu_3525_p2 = (shl_ln899_1_fu_3519_p2 | lshr_ln897_1_fu_3513_p2);

assign p_Result_10_fu_1953_p3 = temp_output_0_V_q1[32'd31];

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_1967_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_11_fu_1975_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_11_fu_1975_p4[ap_tvar_int_0] = tmp_V_4_fu_1967_p3[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_12_fu_2079_p3 = tmp_V_4_fu_1967_p3[lsb_index_fu_1999_p2];

assign p_Result_13_fu_2216_p5 = {{tmp_s_fu_2209_p3}, {zext_ln912_fu_2178_p1[51:0]}};

assign p_Result_14_fu_3431_p3 = temp_output2_0_V_q1[32'd31];

integer ap_tvar_int_1;

always @ (tmp_V_5_fu_3445_p3) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            p_Result_15_fu_3453_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            p_Result_15_fu_3453_p4[ap_tvar_int_1] = tmp_V_5_fu_3445_p3[31 - ap_tvar_int_1];
        end
    end
end

assign p_Result_16_fu_3557_p3 = tmp_V_5_fu_3445_p3[lsb_index_1_fu_3477_p2];

assign p_Result_17_fu_3694_p5 = {{tmp_1_fu_3687_p3}, {zext_ln912_1_fu_3656_p1[51:0]}};

assign p_Result_5_fu_3660_p3 = m_5_fu_3640_p2[32'd54];

assign p_Result_7_fu_4597_p3 = max_idx_V_reg_1449[32'd31];

assign p_Result_9_fu_1548_p3 = {{1'd1}, {trunc_ln565_reg_4675}};

assign p_Result_s_fu_2182_p3 = m_3_fu_2162_p2[32'd54];

assign ret_V_1_fu_1914_p2 = (lhs_2_fu_1906_p3 + mul_ln1192_1_fu_1890_p2);

assign ret_V_2_fu_4587_p4 = {{max_idx_V_reg_1449[31:8]}};

assign ret_V_3_fu_4615_p2 = (ret_V_2_fu_4587_p4 + 24'd1);

assign ret_V_5_fu_4629_p3 = ((p_Result_7_fu_4597_p3[0:0] == 1'b1) ? select_ln850_fu_4621_p3 : ret_V_2_fu_4587_p4);

assign ret_V_fu_1878_p2 = (lhs_1_fu_1870_p3 + mul_ln1192_reg_4754);

assign select_ln571_1_fu_1729_p3 = ((and_ln585_fu_1693_p2[0:0] == 1'b1) ? select_ln588_fu_1645_p3 : trunc_ln586_fu_1634_p1);

assign select_ln571_2_fu_1737_p3 = ((and_ln582_fu_1664_p2[0:0] == 1'b1) ? trunc_ln583_fu_1604_p1 : 32'd0);

assign select_ln571_3_fu_1745_p3 = ((or_ln571_fu_1724_p2[0:0] == 1'b1) ? select_ln571_fu_1717_p3 : select_ln571_1_fu_1729_p3);

assign select_ln571_4_fu_1759_p3 = ((or_ln571_1_fu_1753_p2[0:0] == 1'b1) ? select_ln571_3_fu_1745_p3 : select_ln571_2_fu_1737_p3);

assign select_ln571_fu_1717_p3 = ((icmp_ln571_reg_4680[0:0] == 1'b1) ? 32'd0 : shl_ln604_fu_1653_p2);

assign select_ln588_fu_1645_p3 = ((tmp_72_fu_1638_p3[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln850_fu_4621_p3 = ((icmp_ln851_fu_4609_p2[0:0] == 1'b1) ? ret_V_2_fu_4587_p4 : ret_V_3_fu_4615_p2);

assign select_ln893_1_fu_3668_p3 = ((p_Result_5_fu_3660_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln893_fu_2190_p3 = ((p_Result_s_fu_2182_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln896_1_fu_3571_p3 = ((icmp_ln896_1_fu_3493_p2[0:0] == 1'b1) ? icmp_ln899_1_fu_3537_p2 : p_Result_16_fu_3557_p3);

assign select_ln896_fu_2093_p3 = ((icmp_ln896_fu_2015_p2[0:0] == 1'b1) ? icmp_ln899_fu_2059_p2 : p_Result_12_fu_2079_p3);

assign select_ln908_2_fu_3597_p3 = ((icmp_ln908_1_fu_3565_p2[0:0] == 1'b1) ? select_ln896_1_fu_3571_p3 : and_ln899_3_fu_3585_p2);

assign select_ln908_fu_2119_p3 = ((icmp_ln908_fu_2087_p2[0:0] == 1'b1) ? select_ln896_fu_2093_p3 : and_ln899_1_fu_2107_p2);

assign sext_ln1116_10_fu_2331_p1 = $signed(temp_output_0_V_load_22_reg_5071);

assign sext_ln1116_11_fu_2343_p1 = $signed(temp_output_0_V_load_26_reg_5111);

assign sext_ln1116_12_fu_2352_p1 = $signed(temp_output_0_V_load_29_reg_5136);

assign sext_ln1116_13_fu_2355_p1 = $signed(temp_output_0_V_q0);

assign sext_ln1116_14_fu_3748_p1 = $signed(temp_output2_0_V_load_reg_5727);

assign sext_ln1116_15_fu_3751_p1 = $signed(temp_output2_0_V_load_1_reg_5732);

assign sext_ln1116_16_fu_3754_p1 = $signed(temp_output2_0_V_load_2_reg_5747);

assign sext_ln1116_17_fu_3757_p1 = $signed(temp_output2_0_V_load_3_reg_5752);

assign sext_ln1116_18_fu_3760_p1 = $signed(temp_output2_0_V_load_4_reg_5767);

assign sext_ln1116_19_fu_3763_p1 = $signed(temp_output2_0_V_load_5_reg_5772);

assign sext_ln1116_1_fu_2274_p1 = $signed(temp_output_0_V_load_3_reg_4876);

assign sext_ln1116_20_fu_3766_p1 = $signed(temp_output2_0_V_load_6_reg_5787);

assign sext_ln1116_21_fu_3769_p1 = $signed(temp_output2_0_V_load_7_reg_5792);

assign sext_ln1116_22_fu_3772_p1 = $signed(temp_output2_0_V_load_8_reg_5807);

assign sext_ln1116_23_fu_3775_p1 = $signed(temp_output2_0_V_load_9_reg_5812);

assign sext_ln1116_24_fu_3778_p1 = $signed(temp_output2_0_V_load_10_reg_5827);

assign sext_ln1116_25_fu_3781_p1 = $signed(temp_output2_0_V_load_11_reg_5832);

assign sext_ln1116_26_fu_3784_p1 = $signed(temp_output2_0_V_load_12_reg_5847);

assign sext_ln1116_27_fu_3787_p1 = $signed(temp_output2_0_V_load_13_reg_5852);

assign sext_ln1116_28_fu_3790_p1 = $signed(temp_output2_0_V_q0);

assign sext_ln1116_2_fu_2280_p1 = $signed(temp_output_0_V_load_5_reg_4896);

assign sext_ln1116_3_fu_2283_p1 = $signed(temp_output_0_V_load_6_reg_4911);

assign sext_ln1116_4_fu_2295_p1 = $signed(temp_output_0_V_load_10_reg_4951);

assign sext_ln1116_5_fu_2298_p1 = $signed(temp_output_0_V_load_11_reg_4956);

assign sext_ln1116_6_fu_2301_p1 = $signed(temp_output_0_V_load_12_reg_4971);

assign sext_ln1116_7_fu_2310_p1 = $signed(temp_output_0_V_load_15_reg_4996);

assign sext_ln1116_8_fu_2322_p1 = $signed(temp_output_0_V_load_19_reg_5036);

assign sext_ln1116_9_fu_2328_p1 = $signed(temp_output_0_V_load_21_reg_5056);

assign sext_ln1116_fu_2271_p1 = $signed(temp_output_0_V_load_2_reg_4871);

assign sext_ln1192_10_fu_2325_p1 = $signed(temp_output_0_V_load_20_reg_5051);

assign sext_ln1192_11_fu_2334_p1 = $signed(temp_output_0_V_load_23_reg_5076);

assign sext_ln1192_12_fu_2337_p1 = $signed(temp_output_0_V_load_24_reg_5091);

assign sext_ln1192_13_fu_2340_p1 = $signed(temp_output_0_V_load_25_reg_5096);

assign sext_ln1192_14_fu_2346_p1 = $signed(temp_output_0_V_load_27_reg_5116);

assign sext_ln1192_15_fu_2349_p1 = $signed(temp_output_0_V_load_28_reg_5131);

assign sext_ln1192_1_fu_2277_p1 = $signed(temp_output_0_V_load_4_reg_4891);

assign sext_ln1192_2_fu_2286_p1 = $signed(temp_output_0_V_load_7_reg_4916);

assign sext_ln1192_36_fu_3300_p1 = $signed(mul_ln1192_17_reg_5606);

assign sext_ln1192_3_fu_2289_p1 = $signed(temp_output_0_V_load_8_reg_4931);

assign sext_ln1192_4_fu_2292_p1 = $signed(temp_output_0_V_load_9_reg_4936);

assign sext_ln1192_5_fu_2304_p1 = $signed(temp_output_0_V_load_13_reg_4976);

assign sext_ln1192_6_fu_2307_p1 = $signed(temp_output_0_V_load_14_reg_4991);

assign sext_ln1192_7_fu_2313_p1 = $signed(temp_output_0_V_load_16_reg_5011);

assign sext_ln1192_8_fu_2316_p1 = $signed(temp_output_0_V_load_17_reg_5016);

assign sext_ln1192_9_fu_2319_p1 = $signed(temp_output_0_V_load_18_reg_5031);

assign sext_ln1192_fu_2268_p1 = $signed(temp_output_0_V_load_1_reg_4856);

assign sext_ln581_fu_1595_p1 = sh_amt_fu_1587_p3;

assign sext_ln708_fu_2265_p1 = $signed(temp_output_0_V_load_reg_4851);

assign sh_amt_fu_1587_p3 = ((icmp_ln581_fu_1572_p2[0:0] == 1'b1) ? add_ln581_fu_1577_p2 : sub_ln581_fu_1582_p2);

assign shl_ln1_fu_4567_p3 = {{i_3_reg_1438}, {8'd0}};

assign shl_ln604_fu_1653_p2 = trunc_ln583_fu_1604_p1 << sext_ln581_fu_1595_p1;

assign shl_ln728_10_fu_2768_p3 = {{tmp_36_fu_2758_p4}, {8'd0}};

assign shl_ln728_11_fu_2819_p3 = {{tmp_37_reg_5476}, {8'd0}};

assign shl_ln728_12_fu_2841_p3 = {{tmp_38_fu_2831_p4}, {8'd0}};

assign shl_ln728_13_fu_2864_p3 = {{tmp_39_fu_2854_p4}, {8'd0}};

assign shl_ln728_14_fu_2896_p3 = {{tmp_40_fu_2886_p4}, {8'd0}};

assign shl_ln728_15_fu_2929_p3 = {{tmp_41_fu_2919_p4}, {8'd0}};

assign shl_ln728_16_fu_2980_p3 = {{tmp_42_reg_5521}, {8'd0}};

assign shl_ln728_17_fu_3002_p3 = {{tmp_43_fu_2992_p4}, {8'd0}};

assign shl_ln728_18_fu_3025_p3 = {{tmp_44_fu_3015_p4}, {8'd0}};

assign shl_ln728_19_fu_3057_p3 = {{tmp_45_fu_3047_p4}, {8'd0}};

assign shl_ln728_1_fu_2446_p3 = {{tmp_26_fu_2436_p4}, {8'd0}};

assign shl_ln728_20_fu_3090_p3 = {{tmp_46_fu_3080_p4}, {8'd0}};

assign shl_ln728_21_fu_3141_p3 = {{tmp_47_reg_5566}, {8'd0}};

assign shl_ln728_22_fu_3163_p3 = {{tmp_48_fu_3153_p4}, {8'd0}};

assign shl_ln728_23_fu_3186_p3 = {{tmp_49_fu_3176_p4}, {8'd0}};

assign shl_ln728_24_fu_3218_p3 = {{tmp_50_fu_3208_p4}, {8'd0}};

assign shl_ln728_25_fu_3251_p3 = {{tmp_51_fu_3241_p4}, {8'd0}};

assign shl_ln728_26_fu_3293_p3 = {{tmp_52_reg_5611}, {8'd0}};

assign shl_ln728_27_fu_3319_p3 = {{tmp_53_fu_3309_p4}, {8'd0}};

assign shl_ln728_28_fu_3350_p3 = {{tmp_54_fu_3340_p4}, {8'd0}};

assign shl_ln728_29_fu_3383_p3 = {{tmp_55_fu_3373_p4}, {8'd0}};

assign shl_ln728_2_fu_2497_p3 = {{tmp_27_reg_5386}, {8'd0}};

assign shl_ln728_30_fu_3862_p3 = {{tmp_56_fu_3852_p4}, {8'd0}};

assign shl_ln728_31_fu_3907_p3 = {{tmp_57_fu_3897_p4}, {8'd0}};

assign shl_ln728_32_fu_3994_p3 = {{tmp_58_reg_5961}, {8'd0}};

assign shl_ln728_33_fu_4016_p3 = {{tmp_59_fu_4006_p4}, {8'd0}};

assign shl_ln728_34_fu_4039_p3 = {{tmp_60_fu_4029_p4}, {8'd0}};

assign shl_ln728_35_fu_4083_p3 = {{tmp_61_fu_4073_p4}, {8'd0}};

assign shl_ln728_36_fu_4128_p3 = {{tmp_62_fu_4118_p4}, {8'd0}};

assign shl_ln728_37_fu_4215_p3 = {{tmp_63_reg_5981}, {8'd0}};

assign shl_ln728_38_fu_4237_p3 = {{tmp_64_fu_4227_p4}, {8'd0}};

assign shl_ln728_39_fu_4260_p3 = {{tmp_65_fu_4250_p4}, {8'd0}};

assign shl_ln728_3_fu_2519_p3 = {{tmp_28_fu_2509_p4}, {8'd0}};

assign shl_ln728_40_fu_4304_p3 = {{tmp_66_fu_4294_p4}, {8'd0}};

assign shl_ln728_41_fu_4349_p3 = {{tmp_67_fu_4339_p4}, {8'd0}};

assign shl_ln728_42_fu_4406_p3 = {{tmp_68_reg_6001}, {8'd0}};

assign shl_ln728_43_fu_4436_p3 = {{tmp_69_fu_4426_p4}, {8'd0}};

assign shl_ln728_44_fu_4481_p3 = {{tmp_70_fu_4471_p4}, {8'd0}};

assign shl_ln728_4_fu_2542_p3 = {{tmp_29_fu_2532_p4}, {8'd0}};

assign shl_ln728_5_fu_2574_p3 = {{tmp_30_fu_2564_p4}, {8'd0}};

assign shl_ln728_6_fu_2607_p3 = {{tmp_31_fu_2597_p4}, {8'd0}};

assign shl_ln728_7_fu_2658_p3 = {{tmp_32_reg_5431}, {8'd0}};

assign shl_ln728_8_fu_2680_p3 = {{tmp_33_fu_2670_p4}, {8'd0}};

assign shl_ln728_9_fu_2703_p3 = {{tmp_34_fu_2693_p4}, {8'd0}};

assign shl_ln728_s_fu_2735_p3 = {{tmp_35_fu_2725_p4}, {8'd0}};

assign shl_ln899_1_fu_3519_p2 = 32'd1 << lsb_index_1_fu_3477_p2;

assign shl_ln899_fu_2041_p2 = 32'd1 << lsb_index_fu_1999_p2;

assign shl_ln909_1_fu_3624_p2 = zext_ln907_1_fu_3609_p1 << zext_ln909_1_fu_3621_p1;

assign shl_ln909_fu_2146_p2 = zext_ln907_fu_2131_p1 << zext_ln909_fu_2143_p1;

assign shl_ln_fu_2413_p3 = {{tmp_25_fu_2403_p4}, {8'd0}};

assign sub_ln581_fu_1582_p2 = (12'd8 - F2_reg_4688);

assign sub_ln894_1_fu_3471_p2 = (32'd32 - l_1_fu_3463_p3);

assign sub_ln894_fu_1993_p2 = (32'd32 - l_fu_1985_p3);

assign sub_ln897_1_fu_3503_p2 = (6'd22 - trunc_ln897_1_fu_3499_p1);

assign sub_ln897_fu_2025_p2 = (6'd22 - trunc_ln897_fu_2021_p1);

assign sub_ln909_1_fu_3591_p2 = (32'd54 - sub_ln894_1_fu_3471_p2);

assign sub_ln909_fu_2113_p2 = (32'd54 - sub_ln894_fu_1993_p2);

assign sub_ln915_1_fu_3676_p2 = (11'd24 - trunc_ln893_1_reg_5680);

assign sub_ln915_fu_2198_p2 = (11'd24 - trunc_ln893_reg_4823);

assign temp_output2_0_V_addr_reg_4701 = 64'd0;

assign temp_output2_0_V_load_15_cast_fu_3794_p1 = $signed(temp_output2_0_V_q1);

assign temp_output_0_V_addr_reg_4696 = 64'd0;

assign temp_output_0_V_load_31_cast_fu_2359_p1 = $signed(temp_output_0_V_q1);

assign tmp_1_fu_3687_p3 = {{p_Result_14_reg_5650}, {add_ln915_1_fu_3681_p2}};

assign tmp_20_fu_1805_p4 = {{k_reg_1369[6:1]}};

assign tmp_21_fu_1608_p4 = {{sh_amt_fu_1587_p3[11:5]}};

assign tmp_22_fu_1815_p3 = {{tmp_20_fu_1805_p4}, {j_reg_1357}};

assign tmp_23_fu_1853_p3 = {{or_ln25_reg_4744}, {5'd0}};

assign tmp_24_fu_1896_p4 = {{ret_V_fu_1878_p2[39:8]}};

assign tmp_25_fu_2403_p4 = {{mul_ln708_fu_2389_p2[39:8]}};

assign tmp_26_fu_2436_p4 = {{add_ln1192_fu_2421_p2[39:8]}};

assign tmp_28_fu_2509_p4 = {{add_ln1192_2_fu_2504_p2[39:8]}};

assign tmp_29_fu_2532_p4 = {{add_ln1192_3_fu_2527_p2[39:8]}};

assign tmp_30_fu_2564_p4 = {{add_ln1192_4_fu_2550_p2[39:8]}};

assign tmp_31_fu_2597_p4 = {{add_ln1192_5_fu_2582_p2[39:8]}};

assign tmp_33_fu_2670_p4 = {{add_ln1192_7_fu_2665_p2[39:8]}};

assign tmp_34_fu_2693_p4 = {{add_ln1192_8_fu_2688_p2[39:8]}};

assign tmp_35_fu_2725_p4 = {{add_ln1192_9_fu_2711_p2[39:8]}};

assign tmp_36_fu_2758_p4 = {{add_ln1192_10_fu_2743_p2[39:8]}};

assign tmp_38_fu_2831_p4 = {{add_ln1192_12_fu_2826_p2[39:8]}};

assign tmp_39_fu_2854_p4 = {{add_ln1192_13_fu_2849_p2[39:8]}};

assign tmp_40_fu_2886_p4 = {{add_ln1192_14_fu_2872_p2[39:8]}};

assign tmp_41_fu_2919_p4 = {{add_ln1192_15_fu_2904_p2[39:8]}};

assign tmp_43_fu_2992_p4 = {{add_ln1192_17_fu_2987_p2[39:8]}};

assign tmp_44_fu_3015_p4 = {{add_ln1192_18_fu_3010_p2[39:8]}};

assign tmp_45_fu_3047_p4 = {{add_ln1192_19_fu_3033_p2[39:8]}};

assign tmp_46_fu_3080_p4 = {{add_ln1192_20_fu_3065_p2[39:8]}};

assign tmp_48_fu_3153_p4 = {{add_ln1192_22_fu_3148_p2[39:8]}};

assign tmp_49_fu_3176_p4 = {{add_ln1192_23_fu_3171_p2[39:8]}};

assign tmp_50_fu_3208_p4 = {{add_ln1192_24_fu_3194_p2[39:8]}};

assign tmp_51_fu_3241_p4 = {{add_ln1192_25_fu_3226_p2[39:8]}};

assign tmp_53_fu_3309_p4 = {{add_ln1192_27_fu_3303_p2[39:8]}};

assign tmp_54_fu_3340_p4 = {{add_ln1192_28_fu_3327_p2[39:8]}};

assign tmp_55_fu_3373_p4 = {{add_ln1192_29_fu_3358_p2[39:8]}};

assign tmp_56_fu_3852_p4 = {{mul_ln1118_fu_3826_p2[39:8]}};

assign tmp_57_fu_3897_p4 = {{add_ln1192_33_fu_3870_p2[39:8]}};

assign tmp_59_fu_4006_p4 = {{add_ln1192_35_fu_4001_p2[39:8]}};

assign tmp_60_fu_4029_p4 = {{add_ln1192_36_fu_4024_p2[39:8]}};

assign tmp_61_fu_4073_p4 = {{add_ln1192_37_fu_4047_p2[39:8]}};

assign tmp_62_fu_4118_p4 = {{add_ln1192_38_fu_4091_p2[39:8]}};

assign tmp_64_fu_4227_p4 = {{add_ln1192_40_fu_4222_p2[39:8]}};

assign tmp_65_fu_4250_p4 = {{add_ln1192_41_fu_4245_p2[39:8]}};

assign tmp_66_fu_4294_p4 = {{add_ln1192_42_fu_4268_p2[39:8]}};

assign tmp_67_fu_4339_p4 = {{add_ln1192_43_fu_4312_p2[39:8]}};

assign tmp_69_fu_4426_p4 = {{add_ln1192_45_fu_4413_p2[39:8]}};

assign tmp_70_fu_4471_p4 = {{add_ln1192_46_fu_4444_p2[39:8]}};

assign tmp_72_fu_1638_p3 = input_img_load_reg_4660_pp0_iter2_reg[32'd31];

assign tmp_74_fu_2005_p4 = {{lsb_index_fu_1999_p2[31:1]}};

assign tmp_75_fu_2065_p3 = lsb_index_fu_1999_p2[32'd31];

assign tmp_78_fu_3483_p4 = {{lsb_index_1_fu_3477_p2[31:1]}};

assign tmp_79_fu_3543_p3 = lsb_index_1_fu_3477_p2[32'd31];

assign tmp_V_2_fu_3439_p2 = (32'd0 - temp_output2_0_V_q1);

assign tmp_V_4_fu_1967_p3 = ((p_Result_10_fu_1953_p3[0:0] == 1'b1) ? tmp_V_fu_1961_p2 : temp_output_0_V_q1);

assign tmp_V_5_fu_3445_p3 = ((p_Result_14_fu_3431_p3[0:0] == 1'b1) ? tmp_V_2_fu_3439_p2 : temp_output2_0_V_q1);

assign tmp_V_fu_1961_p2 = (32'd0 - temp_output_0_V_q1);

assign tmp_s_fu_2209_p3 = {{p_Result_10_reg_4793}, {add_ln915_fu_2203_p2}};

assign trunc_ln1506_1_fu_3711_p4 = {{m_5_fu_3640_p2[52:1]}};

assign trunc_ln555_fu_1506_p1 = ireg_fu_1502_p1[62:0];

assign trunc_ln565_fu_1532_p1 = ireg_fu_1502_p1[51:0];

assign trunc_ln583_fu_1604_p1 = man_V_2_fu_1565_p3[31:0];

assign trunc_ln586_fu_1634_p1 = ashr_ln586_fu_1628_p2[31:0];

assign trunc_ln6_fu_2233_p4 = {{m_3_fu_2162_p2[52:1]}};

assign trunc_ln851_fu_4605_p1 = max_idx_V_reg_1449[7:0];

assign trunc_ln893_1_fu_3605_p1 = l_1_fu_3463_p3[10:0];

assign trunc_ln893_fu_2127_p1 = l_fu_1985_p3[10:0];

assign trunc_ln897_1_fu_3499_p1 = sub_ln894_1_fu_3471_p2[5:0];

assign trunc_ln897_fu_2021_p1 = sub_ln894_fu_1993_p2[5:0];

assign weights_layer1_weights_V_address0 = zext_ln1118_1_fu_1865_p1;

assign weights_layer1_weights_V_address1 = zext_ln1118_fu_1823_p1;

assign xor_ln571_fu_1659_p2 = (icmp_ln571_reg_4680 ^ 1'd1);

assign xor_ln581_fu_1705_p2 = (or_ln581_fu_1699_p2 ^ 1'd1);

assign xor_ln582_fu_1675_p2 = (or_ln582_fu_1670_p2 ^ 1'd1);

assign xor_ln899_1_fu_3551_p2 = (tmp_79_fu_3543_p3 ^ 1'd1);

assign xor_ln899_fu_2073_p2 = (tmp_75_fu_2065_p3 ^ 1'd1);

assign zext_ln1118_1_fu_1865_p1 = add_ln1118_fu_1860_p2;

assign zext_ln1118_fu_1823_p1 = tmp_22_fu_1815_p3;

assign zext_ln111_fu_4575_p1 = shl_ln1_fu_4567_p3;

assign zext_ln21_1_fu_1784_p1 = j_reg_1357;

assign zext_ln21_fu_1780_p1 = j_reg_1357;

assign zext_ln23_fu_1834_p1 = or_ln25_fu_1828_p2;

assign zext_ln455_fu_1528_p1 = exp_tmp_fu_1518_p4;

assign zext_ln569_fu_1555_p1 = p_Result_9_fu_1548_p3;

assign zext_ln586_fu_1624_p1 = $unsigned(sext_ln581_fu_1595_p1);

assign zext_ln897_1_fu_3509_p1 = sub_ln897_1_fu_3503_p2;

assign zext_ln897_fu_2031_p1 = sub_ln897_fu_2025_p2;

assign zext_ln907_1_fu_3609_p1 = tmp_V_5_reg_5655;

assign zext_ln907_fu_2131_p1 = tmp_V_4_reg_4798;

assign zext_ln908_1_fu_3612_p1 = add_ln908_1_reg_5665;

assign zext_ln908_fu_2134_p1 = add_ln908_reg_4808;

assign zext_ln909_1_fu_3621_p1 = sub_ln909_1_reg_5670;

assign zext_ln909_fu_2143_p1 = sub_ln909_reg_4813;

assign zext_ln911_1_fu_3637_p1 = select_ln908_2_reg_5675;

assign zext_ln911_fu_2159_p1 = select_ln908_reg_4818;

assign zext_ln912_1_fu_3656_p1 = m_fu_3646_p4;

assign zext_ln912_fu_2178_p1 = m_8_fu_2168_p4;

always @ (posedge ap_clk) begin
    i_cast_reg_4650[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_4650_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_4650_pp0_iter2_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln21_reg_4715[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln21_1_reg_4720[11:6] <= 6'b000000;
    or_ln25_reg_4744[0] <= 1'b1;
    j_1_cast_reg_5320[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5320_pp3_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5320_pp3_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5320_pp3_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5320_pp3_iter4_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5320_pp3_iter5_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5320_pp3_iter6_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //nn_inference
